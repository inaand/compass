---
# Source: compass/charts/prometheus-postgres-exporter/templates/podsecuritypolicy.yaml
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: compass-prometheus-postgres-exporter
  labels:
    app: prometheus-postgres-exporter
    chart: prometheus-postgres-exporter-1.3.0
    heritage: Helm
    release: compass
  annotations:
    seccomp.security.alpha.kubernetes.io/allowedProfileNames: 'runtime/default'
    apparmor.security.beta.kubernetes.io/allowedProfileNames: 'runtime/default'
    seccomp.security.alpha.kubernetes.io/defaultProfileName:  'runtime/default'
    apparmor.security.beta.kubernetes.io/defaultProfileName:  'runtime/default'
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'RunAsAny'
  seLinux:
    rule: 'RunAsAny'
  supplementalGroups:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: false
---
# Source: compass/charts/connector/templates/certs-setup-role-binding.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: connector-certs-setup-job
  namespace: default
  labels:
    app: connector-certs-setup-job
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/charts/connector/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-connector
  namespace: default
  labels:
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/charts/director/templates/external-certificate-rotation-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: director-external-certificate-rotation
  namespace: default
  labels:
    app: director
    release: compass
    helm.sh/chart: director-0.1.0
    app.kubernetes.io/name: director
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/charts/director/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-director
  namespace: default
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-operations-controller
  namespace: default
---
# Source: compass/charts/ord-service/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-ord-service
  namespace: default
---
# Source: compass/charts/pairing-adapter/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-pairing-adapter
  namespace: default
  labels:
    app: pairing-adapter
    release: compass
    helm.sh/chart: pairing-adapter-0.1.0
    app.kubernetes.io/name: pairing-adapter
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/charts/prometheus-postgres-exporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-prometheus-postgres-exporter
  labels:
    app: prometheus-postgres-exporter
    chart: prometheus-postgres-exporter-1.3.0    
    release: "compass"
    heritage: "Helm"
---
# Source: compass/charts/system-broker/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-system-broker
  namespace: default
  labels:
    release: compass
    helm.sh/chart: system-broker-0.1.0
    app.kubernetes.io/name: system-broker
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/charts/tenant-fetcher/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-tenant-fetcher
  namespace: default
---
# Source: compass/templates/migrator-down-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-migrator-down-job
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/migrator-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-migrator-job
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/ord-aggregator-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-ord-aggregator
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/system-fetcher-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-system-fetcher
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/tests/connectivity-adapter/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-connectivity-adapter-tests
  namespace: kyma-system
  labels:
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/tests/connector/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-connector-tests
  namespace: kyma-system
  labels:
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/tests/director/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-e2e-director
  namespace: kyma-system
  labels:
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/tests/istio/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-compass
  namespace: default
---
# Source: compass/templates/tests/ord-service/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-e2e-ord-service
  namespace: kyma-system
  labels:
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/tests/system-fetcher/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-e2e-system-fetcher
  namespace: kyma-system
  labels:
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/templates/tests/tenant-fetcher-job/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: compass-e2e-tenant-fetcher
  namespace: kyma-system
  labels:
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
---
# Source: compass/charts/director/templates/root-ca.yaml
apiVersion: v1
kind: Secret
metadata:
  name: compass-gateway-mtls-certs-cacert
  namespace: default
type: Opaque
data:
  "cacert": "LS0tIEZlYXR1cmUgRGlzYWJsZWQgTG9jYWxseSAtLS0g"
---
# Source: compass/charts/gateway/templates/cmp-root-ca.yaml
apiVersion: v1
kind: Secret
metadata:
  name: compass-gateway-mtls-certs-cacert
  namespace: istio-system
type: Opaque
data:
  "cacert": "" # This value is populated by Connectivity Certs Setup Job
---
# Source: compass/charts/gateway/templates/gateway-certs-mtls.yaml
apiVersion: v1
kind: Secret
metadata:
  name: compass-gateway-mtls-certs
  namespace: istio-system
type: Opaque
data:
  "key": 
  "cert":
---
# Source: compass/charts/cockpit/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-cockpit
  labels:
    app: cockpit
    release: compass
data:
  config.js: |
    window.clusterConfig = {
      compassAutomaticDefaultScenario: 'true',
      compassModuleUrl : 'https://compass-mf.kyma.local-test',
      compassApiUrl: 'https://compass-gateway.kyma.local-test/director/graphql',
      domain: 'kyma.local-test',
      auth: {
        authority: 'https://dex.kyma.local-test',
        client_id: 'compass-ui',
        scope: 'audience:server:client_id:compass-ui openid profile email groups',
      },
      clientIDHeaderKey: 'client_user'
    };
---
# Source: compass/charts/connector/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap


metadata:
  name: revocations-config
  namespace: default
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass


data:
---
# Source: compass/charts/director/templates/configmap-configuration.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-director-config
  namespace: default
  labels:
    app: director
    release: compass
data:
  config.yaml: |
    # Required scopes for specific GraphQL operations
    graphql:
      query:
        applications: ["application:read"]
        application: ["application:read"]
        applicationsForRuntime: ["application:read"]
        applicationTemplates: ["application_template:read"]
        applicationTemplate: ["application_template:read"]
        runtimes: ["runtime:read"]
        runtimeContexts: ["runtime:read"]
        runtime: ["runtime:read"]
        runtimeContext: ["runtime:read"]
        labelDefinitions: ["label_definition:read"]
        labelDefinition: ["label_definition:read"]
        bundleByInstanceAuth: [ "application:read" ]
        bundleInstanceAuth: [ "application:read" ]
        healthChecks: ["health_checks:read"]
        integrationSystem: ["integration_system:read"]
        integrationSystems: ["integration_system:read"]
        viewer: []
        tenants: ["tenant:read"]
        automaticScenarioAssignments: ["automatic_scenario_assignment:read"]
        automaticScenarioAssignmentForScenario: ["automatic_scenario_assignment:read"]
        automaticScenarioAssignmentsForSelector: ["automatic_scenario_assignment:read"]
  
      mutation:
        registerApplication: ["application:write"]
        registerApplicationFromTemplate: ["application:write"]
        updateApplication: ["application:write"]
        unregisterApplication: ["application:write"]
        unpairApplication: ["application:write"]
        createApplicationTemplate: ["application_template:write"]
        updateApplicationTemplate: ["application_template:write"]
        deleteApplicationTemplate: ["application_template:write"]
        registerRuntime: ["runtime:write"]
        updateRuntime: ["runtime:write"]
        unregisterRuntime: ["runtime:write"]
        registerRuntimeContext: [ "runtime:write" ]
        updateRuntimeContext: [ "runtime:write" ]
        unregisterRuntimeContext: [ "runtime:write" ]
        setRuntimeTenant: [ "tenant:write" ]
        registerIntegrationSystem: ["integration_system:write"]
        updateIntegrationSystem: ["integration_system:write"]
        unregisterIntegrationSystem: ["integration_system:write"]
        addWebhook: ["application:write"]
        updateWebhook: ["application:write"]
        deleteWebhook: ["application:write"]
        addAPIDefinitionToBundle: ["application:write"]
        updateAPIDefinition: ["application:write"]
        deleteAPIDefinition: ["application:write"]
        refetchAPISpec: ["application:write"]
        addEventDefinitionToBundle: ["application:write"]
        updateEventDefinition: ["application:write"]
        deleteEventDefinition: ["application:write"]
        refetchEventAPISpec: ["application:write"]
        addDocumentToBundle: ["application:write"]
        deleteDocument: ["application:write"]
        createFormation: ["formation:write"]
        deleteFormation: ["formation:write"]
        assignFormation: [ "formation:write" ]
        unassignFormation: [ "formation:write" ]
        createLabelDefinition: ["label_definition:write"]
        updateLabelDefinition: ["label_definition:write"]
        deleteLabelDefinition: ["label_definition:write"]
        setApplicationLabel: ["application:write"]
        deleteApplicationLabel: ["application:write"]
        setRuntimeLabel: ["runtime:write"]
        deleteRuntimeLabel: ["runtime:write"]
        requestOneTimeTokenForRuntime: ["runtime:write"]
        requestOneTimeTokenForApplication: ["application:write"]
        requestClientCredentialsForRuntime: ["runtime:write"]
        requestClientCredentialsForApplication: ["application:write"]
        requestClientCredentialsForIntegrationSystem: ["integration_system:write"]
        deleteSystemAuthForRuntime: ["runtime:write"]
        deleteSystemAuthForApplication: ["application:write"]
        deleteSystemAuthForIntegrationSystem: ["integration_system:write"]
        setDefaultEventingForApplication: ["eventing:manage"]
        deleteDefaultEventingForApplication: ["eventing:manage"]
        requestBundleInstanceAuthCreation: ["runtime:write"]
        requestBundleInstanceAuthDeletion: ["runtime:write"]
        setBundleInstanceAuth: ["application:write"]
        deleteBundleInstanceAuth: ["application:write"]
        addBundle: ["application:write"]
        updateBundle: ["application:write"]
        deleteBundle: ["application:write"]
        createAutomaticScenarioAssignment: ["automatic_scenario_assignment:write"]
        deleteAutomaticScenarioAssignmentForScenario: ["automatic_scenario_assignment:write"]
        deleteAutomaticScenarioAssignmentsForSelector: ["automatic_scenario_assignment:write"]
        writeTenants: ["tenant:write"]
        deleteTenants: ["tenant:write"]
        updateTenant: ["tenant:write"]
  
      field:
        fetch_request:
          auth: ["fetch-request.auth:read"]
        webhooks:
          auth: ["webhooks.auth:read"]
        application:
          auths: ["application.auths:read"]
          webhooks: ["application.webhooks:read"]
        application_template:
          webhooks: ["application_template.webhooks:read"]
        bundle:
          instance_auth: ["bundle.instance_auths:read"]
          instance_auths: ["bundle.instance_auths:read"]
          default_instance_auth: ["bundle.instance_auths:read"]
        document:
          fetch_request: ["document.fetch_request:read"]
        event_spec:
          fetch_request: ["event_spec.fetch_request:read"]
        api_spec:
          fetch_request: ["api_spec.fetch_request:read"]
        runtime:
          auths: ["runtime.auths:read"]
        integration_system:
          auths: ["integration_system.auths:read"]
  
    # Scopes assigned for every new Client Credentials by given object type (Runtime / Application / Integration System)
    # and scopes mapped to a consumer with the given type, then that consumer is using a client certificate
    scopesPerConsumerType:
      runtime:
        - "runtime:read"
        - "runtime:write"
        - "application:read"
        - "runtime.auths:read"
        - "bundle.instance_auths:read"
      application:
        - "application:read"
        - "application:write"
        - "application.auths:read"
        - "application.webhooks:read"
        - "bundle.instance_auths:read"
        - "document.fetch_request:read"
        - "event_spec.fetch_request:read"
        - "api_spec.fetch_request:read"
        - "fetch-request.auth:read"
      integration_system:
        - "application:read"
        - "application:write"
        - "application_template:read"
        - "application_template:write"
        - "runtime:read"
        - "runtime:write"
        - "integration_system:read"
        - "label_definition:read"
        - "label_definition:write"
        - "automatic_scenario_assignment:read"
        - "automatic_scenario_assignment:write"
        - "integration_system.auths:read"
        - "application_template.webhooks:read"
        - "formation:write"
      default:
        - "runtime:read"
        - "runtime:write"
        - "tenant:read"
  
    clientCredentialsRegistrationGrantTypes:
      - "client_credentials"
    applicationHideSelectors:
      applicationHideSelectorKey:
        - "applicationHideSelectorValue"
---
# Source: compass/charts/director/templates/configmap-default-tenant-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-director-default-tenant-config
  namespace: default
  labels:
    app: director
    release: compass
data:
  tenants.json: |-
    [{"id":"3e64ebae-38b5-46a0-b1ed-9ccee153a0ae","name":"default","type":"account"},{"id":"1eba80dd-8ff6-54ee-be4d-77944d17b10b","name":"foo","type":"account"},{"id":"af9f84a9-1d3a-4d9f-ae0c-94f883b33b6e","name":"bar","type":"account"},{"id":"f1c4b5be-b0e1-41f9-b0bc-b378200dcca0","name":"TestTenantSeparation","type":"account"},{"id":"0403be1e-f854-475e-9074-922120277af5","name":"TestDeleteLastScenarioForApplication","type":"account"},{"id":"d9553135-6115-4c67-b4d9-962c00f3725f","name":"Test_DeleteAutomaticScenarioAssignmentForSelector","type":"account"},{"id":"8c733a45-d988-4472-af10-1256b82c70c0","name":"Test_AutomaticScenarioAssigmentForRuntime","type":"account"},{"id":"65a63692-c00a-4a7d-8376-8615ee37f45c","name":"TestAutomaticScenarioAssignmentsWholeScenario","type":"account"},{"id":"72329135-27fd-4284-9bcb-37ea8d6307d0","name":"TestTenantsQueryTenantNotInitialized","type":"account"},{"id":"5577cf46-4f78-45fa-b55f-a42a3bdba868","name":"Test Default","parent":"2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0","type":"account"},{"id":"2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0","name":"Test_DefaultCustomer","type":"customer"},{"id":"3f641cf5-2d14-4e0f-a122-16e7569926f1","name":"TestListLabelDefinitions","type":"account"},{"id":"8263cc13-5698-4a2d-9257-e8e76b543e88","name":"Test_AutomaticScenarioAssignmentQueries","type":"account"},{"id":"2263cc13-5698-4a2d-9257-e8e76b543e33","name":"TestGetScenariosLabelDefinitionCreatesOneIfNotExists","type":"account"},{"id":"5984a414-1eed-4972-af2c-b2b6a415c7d7","name":"TestApplicationsForRuntime","type":"account"},{"id":"d08e4cb6-a77f-4a07-b021-e3317a373597","name":"Test_DeleteAutomaticScenarioAssignmentForScenario","type":"account"},{"id":"7e1f2df8-36dc-4e40-8be3-d1555d50c91c","name":"TestApplicationsForRuntimeWithHiddenApps","type":"account"},{"id":"8cf0c909-f816-4fe3-a507-a7917ccd8380","name":"TestTenantsQueryTenantInitialized","type":"account"},{"id":"0d597250-6b2d-4d89-9c54-e23cb497cd01","name":"TestDeleteApplicationIfInScenario","type":"account"},{"id":"f8075207-1478-4a80-bd26-24a4785a2bfd","name":"TestProviderSubaccount","parent":"5577cf46-4f78-45fa-b55f-a42a3bdba868","type":"subaccount"},{"id":"123e4567-e89b-12d3-a456-426614174001","name":"TestCertificateSubaccount","parent":"5577cf46-4f78-45fa-b55f-a42a3bdba868","type":"subaccount"},{"id":"3cfcdd62-320d-403b-b66a-4ee3cdd06947","name":"TestIntegrationSystemManagedSubaccount","parent":"5577cf46-4f78-45fa-b55f-a42a3bdba868","type":"subaccount"},{"id":"7e8ab2e3-3bb4-42e3-92b2-4e0bf48559d3","name":"TestIntegrationSystemManagedAccount","parent":"2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0","type":"account"}]
---
# Source: compass/charts/director/templates/configmap-static-groups.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-director-static-groups
  namespace: default
  labels:
    app: director
    release: compass
data:
  static-groups.yaml: |
    - groupname: "mps-superadmin"
      scopes:
        - "application:read"
        - "application:write"
        - "application_template:read"
        - "application_template:write"
        - "integration_system:read"
        - "integration_system:write"
        - "runtime:read"
        - "runtime:write"
        - "label_definition:read"
        - "label_definition:write"
        - "eventing:manage"
        - "tenant:read"
        - "automatic_scenario_assignment:read"
        - "automatic_scenario_assignment:write"
        - "application.auths:read"
        - "application.webhooks:read"
        - "application_template.webhooks:read"
        - "bundle.instance_auths:read"
        - "document.fetch_request:read"
        - "event_spec.fetch_request:read"
        - "api_spec.fetch_request:read"
        - "integration_system.auths:read"
        - "runtime.auths:read"
        - "fetch-request.auth:read"
        - "webhooks.auth:read"
        - "formation:write"
    - groupname: "runtimeAdmin"
      scopes:
        - "application:read"
        - "application:write"
        - "application_template:read"
        - "application_template:write"
        - "integration_system:read"
        - "integration_system:write"
        - "runtime:read"
        - "runtime:write"
        - "label_definition:read"
        - "label_definition:write"
        - "eventing:manage"
        - "tenant:read"
        - "automatic_scenario_assignment:read"
        - "automatic_scenario_assignment:write"
        - "application.auths:read"
        - "application.webhooks:read"
        - "application_template.webhooks:read"
        - "bundle.instance_auths:read"
        - "document.fetch_request:read"
        - "event_spec.fetch_request:read"
        - "api_spec.fetch_request:read"
        - "integration_system.auths:read"
        - "runtime.auths:read"
        - "fetch-request.auth:read"
        - "webhooks.auth:read"
        - "formation:write"
    - groupname: "runtimeNamespaceAdmin"
      scopes:
        - "application:read"
        - "application:write"
        - "application_template:read"
        - "application_template:write"
        - "integration_system:read"
        - "integration_system:write"
        - "runtime:read"
        - "runtime:write"
        - "label_definition:read"
        - "label_definition:write"
        - "eventing:manage"
        - "tenant:read"
        - "automatic_scenario_assignment:read"
        - "automatic_scenario_assignment:write"
        - "application.auths:read"
        - "application.webhooks:read"
        - "application_template.webhooks:read"
        - "bundle.instance_auths:read"
        - "document.fetch_request:read"
        - "event_spec.fetch_request:read"
        - "api_spec.fetch_request:read"
        - "integration_system.auths:read"
        - "runtime.auths:read"
        - "fetch-request.auth:read"
        - "webhooks.auth:read"
        - "formation:write"
    - groupname: "runtimeOperator"
      scopes:
        - "application:read"
        - "application_template:read"
        - "integration_system:read"
        - "runtime:read"
        - "label_definition:read"
        - "tenant:read"
        - "automatic_scenario_assignment:read"
---
# Source: compass/charts/director/templates/configmap-static-users.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-director-static-users
  namespace: default
  labels:
    app: director
    release: compass
data:
  static-users.yaml: |-
    - username: "admin"
      tenants:
          - 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
          - 1eba80dd-8ff6-54ee-be4d-77944d17b10b
          - af9f84a9-1d3a-4d9f-ae0c-94f883b33b6e
          - f1c4b5be-b0e1-41f9-b0bc-b378200dcca0
          - 0403be1e-f854-475e-9074-922120277af5
          - d9553135-6115-4c67-b4d9-962c00f3725f
          - 8c733a45-d988-4472-af10-1256b82c70c0
          - 65a63692-c00a-4a7d-8376-8615ee37f45c
          - 72329135-27fd-4284-9bcb-37ea8d6307d0
          - 5577cf46-4f78-45fa-b55f-a42a3bdba868
          - 2c4f4a25-ba9a-4dbc-be68-e0beb77a7eb0
          - 3f641cf5-2d14-4e0f-a122-16e7569926f1
          - 8263cc13-5698-4a2d-9257-e8e76b543e88
          - 2263cc13-5698-4a2d-9257-e8e76b543e33
          - 5984a414-1eed-4972-af2c-b2b6a415c7d7
          - d08e4cb6-a77f-4a07-b021-e3317a373597
          - 7e1f2df8-36dc-4e40-8be3-d1555d50c91c
          - 8cf0c909-f816-4fe3-a507-a7917ccd8380
          - 0d597250-6b2d-4d89-9c54-e23cb497cd01
          - f8075207-1478-4a80-bd26-24a4785a2bfd
          - 123e4567-e89b-12d3-a456-426614174001
          - 3cfcdd62-320d-403b-b66a-4ee3cdd06947
          - 7e8ab2e3-3bb4-42e3-92b2-4e0bf48559d3
      scopes:
      - "application:read"
      - "application:write"
      - "application_template:read"
      - "application_template:write"
      - "integration_system:read"
      - "integration_system:write"
      - "runtime:read"
      - "runtime:write"
      - "label_definition:read"
      - "label_definition:write"
      - "eventing:manage"
      - "tenant:read"
      - "automatic_scenario_assignment:read"
      - "automatic_scenario_assignment:write"
      - "application.auths:read"
      - "application.webhooks:read"
      - "application_template.webhooks:read"
      - "bundle.instance_auths:read"
      - "document.fetch_request:read"
      - "event_spec.fetch_request:read"
      - "api_spec.fetch_request:read"
      - "integration_system.auths:read"
      - "runtime.auths:read"
      - "fetch-request.auth:read"
      - "webhooks.auth:read"
      - "formation:write"
---
# Source: compass/charts/director/templates/dashboard-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-director-dashboard
  namespace: kyma-system
  labels:
    grafana_dashboard: "1"
    app: monitoring-grafana
data:
  compass-director-dashboard.json: |-
    {
      "annotations": {
        "list": [
          {
            "$$hashKey": "object:7",
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "Compass Director component",
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": 43,
      "links": [],
      "panels": [
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 4,
          "panels": [],
          "title": "Business metrics",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "decimals": 0,
          "editable": true,
          "error": false,
          "fill": 1,
          "fillGradient": 0,
          "grid": {
            "threshold1Color": "rgba(216, 200, 27, 0.27)",
            "threshold2Color": "rgba(234, 112, 112, 0.22)"
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 1
          },
          "hiddenSeries": false,
          "id": 48,
          "isNew": false,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(compass_director_tenants_total_quantity)",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 1,
              "legendFormat": "Total tenants",
              "metric": "container_memory_usage_bytes",
              "refId": "A",
              "step": 15
            },
            {
              "expr": "sum(compass_director_tenants_active_total_quantity)",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 2,
              "legendFormat": "Active tenants",
              "metric": "kube_pod_container_resource_requests_memory_bytes",
              "refId": "B",
              "step": 20
            },
            {
              "expr": "sum(compass_director_tenants_total_quantity-compass_director_tenants_active_total_quantity)",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 2,
              "legendFormat": "Inactive tenants",
              "metric": "kube_pod_container_resource_limits_memory_bytes",
              "refId": "C",
              "step": 20
            },
            {
              "expr": "sum(compass_director_used_tenants_count)",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 2,
              "legendFormat": "Tenants with at least one runtime or application",
              "metric": "kube_pod_container_resource_limits_memory_bytes",
              "refId": "D",
              "step": 20
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Tenants",
          "tooltip": {
            "msResolution": true,
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:1242",
              "decimals": 0,
              "format": "none",
              "logBase": 1,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:1243",
              "decimals": null,
              "format": "none",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "decimals": 0,
          "editable": true,
          "error": false,
          "fill": 1,
          "fillGradient": 0,
          "grid": {
            "threshold1Color": "rgba(216, 200, 27, 0.27)",
            "threshold2Color": "rgba(234, 112, 112, 0.22)"
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 1
          },
          "hiddenSeries": false,
          "id": 50,
          "isNew": false,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(compass_director_applications_total_quantity)",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 1,
              "legendFormat": "Number of applications",
              "metric": "container_memory_usage_bytes",
              "refId": "A",
              "step": 15
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Applications",
          "tooltip": {
            "msResolution": true,
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:1242",
              "decimals": 0,
              "format": "none",
              "logBase": 1,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:1243",
              "decimals": 0,
              "format": "none",
              "logBase": 1,
              "min": "0",
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "decimals": 0,
          "editable": true,
          "error": false,
          "fill": 1,
          "fillGradient": 0,
          "grid": {
            "threshold1Color": "rgba(216, 200, 27, 0.27)",
            "threshold2Color": "rgba(234, 112, 112, 0.22)"
          },
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 1
          },
          "hiddenSeries": false,
          "id": 52,
          "isNew": false,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(compass_director_runtimes_total_quantity)",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 1,
              "legendFormat": "Number of runtimes",
              "metric": "container_memory_usage_bytes",
              "refId": "A",
              "step": 15
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Runtimes",
          "tooltip": {
            "msResolution": true,
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:1242",
              "decimals": 0,
              "format": "none",
              "logBase": 1,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:1243",
              "decimals": 0,
              "format": "none",
              "logBase": 1,
              "min": "0",
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 8
          },
          "id": 2,
          "panels": [],
          "title": "Resources",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "editable": true,
          "error": false,
          "fill": 1,
          "fillGradient": 0,
          "grid": {
            "threshold1Color": "rgba(216, 200, 27, 0.27)",
            "threshold2Color": "rgba(234, 112, 112, 0.22)"
          },
          "gridPos": {
            "h": 8,
            "w": 8,
            "x": 0,
            "y": 9
          },
          "hiddenSeries": false,
          "id": 6,
          "isNew": false,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (container) (container_memory_usage_bytes{job=\"kubelet\",pod=~\"compass-director-[^(tenant)].*\",container!=\"POD\",container!=\"\"})",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 1,
              "legendFormat": "{{ container }} - Current",
              "metric": "container_memory_usage_bytes",
              "refId": "A",
              "step": 15
            },
            {
              "expr": "avg by (container) (kube_pod_container_resource_requests_memory_bytes{pod=~\"compass-director-[^(tenant)].*\"})",
              "format": "time_series",
              "hide": false,
              "instant": false,
              "interval": "10s",
              "intervalFactor": 2,
              "legendFormat": "{{container}} - Requests",
              "metric": "kube_pod_container_resource_requests_memory_bytes",
              "refId": "B",
              "step": 20
            },
            {
              "expr": "avg by (container) (kube_pod_container_resource_limits_memory_bytes{pod=~\"compass-director-[^(tenant)].*\"})",
              "format": "time_series",
              "hide": false,
              "instant": false,
              "interval": "10s",
              "intervalFactor": 2,
              "legendFormat": "{{container}} - Limit",
              "metric": "kube_pod_container_resource_limits_memory_bytes",
              "refId": "C",
              "step": 20
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Sum of memory usage by container",
          "tooltip": {
            "msResolution": true,
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:2653",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:2654",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "editable": true,
          "error": false,
          "fill": 1,
          "fillGradient": 0,
          "grid": {
            "threshold1Color": "rgba(216, 200, 27, 0.27)",
            "threshold2Color": "rgba(234, 112, 112, 0.22)"
          },
          "gridPos": {
            "h": 8,
            "w": 8,
            "x": 8,
            "y": 9
          },
          "hiddenSeries": false,
          "id": 7,
          "isNew": false,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by(container) (irate(container_cpu_usage_seconds_total{job=\"kubelet\",pod=~\"compass-director-[^(tenant)].*\",container!=\"POD\",container!=\"\"}[1m]))",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 1,
              "legendFormat": "{{container}} - Current",
              "metric": "container_memory_usage_bytes",
              "refId": "A",
              "step": 15
            },
            {
              "expr": "avg by (container) (kube_pod_container_resource_requests_cpu_cores{pod=~\"compass-director-[^(tenant)].*\"})",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 2,
              "legendFormat": "{{container}} - Requests",
              "metric": "kube_pod_container_resource_requests_memory_bytes",
              "refId": "B",
              "step": 20
            },
            {
              "expr": "avg by (container) (kube_pod_container_resource_limits_cpu_cores{pod=~\"compass-director-[^(tenant)].*\"})",
              "format": "time_series",
              "instant": false,
              "interval": "10s",
              "intervalFactor": 2,
              "legendFormat": "{{container}} - Limit",
              "metric": "kube_pod_container_resource_limits_memory_bytes",
              "refId": "C",
              "step": 20
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Sum of CPU usage by container",
          "tooltip": {
            "msResolution": true,
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:2732",
              "format": "short",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:2733",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "editable": true,
          "error": false,
          "fill": 1,
          "fillGradient": 0,
          "grid": {},
          "gridPos": {
            "h": 8,
            "w": 8,
            "x": 16,
            "y": 9
          },
          "hiddenSeries": false,
          "id": 15,
          "isNew": true,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {
              "$$hashKey": "object:1833",
              "alias": "alloc rate",
              "yaxis": 2
            }
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "go_memstats_alloc_bytes{service=\"compass-director-metrics\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{pod}} - bytes allocated",
              "metric": "go_memstats_alloc_bytes",
              "refId": "A",
              "step": 4
            },
            {
              "expr": "rate(go_memstats_alloc_bytes_total{service=\"compass-director-metrics\"}[30s])",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{pod}} - alloc rate",
              "metric": "go_memstats_alloc_bytes_total",
              "refId": "B",
              "step": 4
            },
            {
              "expr": "go_memstats_stack_inuse_bytes{service=\"compass-director-metrics\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{pod}} - stack inuse",
              "metric": "go_memstats_stack_inuse_bytes",
              "refId": "C",
              "step": 4
            },
            {
              "expr": "go_memstats_heap_inuse_bytes{service=\"compass-director-metrics\"}",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{pod}} - heap inuse",
              "metric": "go_memstats_heap_inuse_bytes",
              "refId": "D",
              "step": 4
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Go memstats by pod",
          "tooltip": {
            "msResolution": false,
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:1846",
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:1847",
              "format": "Bps",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 6,
            "w": 6,
            "x": 0,
            "y": 17
          },
          "hiddenSeries": false,
          "id": 13,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "go_goroutines{service=\"compass-director-metrics\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{pod}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Goroutines",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 6,
            "w": 6,
            "x": 6,
            "y": 17
          },
          "hiddenSeries": false,
          "id": 21,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "go_gc_duration_seconds{service=\"compass-director-metrics\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{pod}} - {{quantile}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "GC duration [s]",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 6,
            "w": 6,
            "x": 12,
            "y": 17
          },
          "hiddenSeries": false,
          "id": 17,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "go_threads{service=\"compass-director-metrics\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{pod}}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Gothreads",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "editable": true,
          "error": false,
          "fill": 1,
          "fillGradient": 0,
          "grid": {},
          "gridPos": {
            "h": 6,
            "w": 6,
            "x": 18,
            "y": 17
          },
          "hiddenSeries": false,
          "id": 19,
          "interval": "",
          "isNew": true,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "process_open_fds{service=\"compass-director-metrics\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{pod}}",
              "metric": "process_open_fds",
              "refId": "A",
              "step": 4
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "open fds",
          "tooltip": {
            "msResolution": false,
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 23
          },
          "id": 36,
          "panels": [],
          "title": "Request handling",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "cacheTimeout": null,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "description": "",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 10,
            "x": 0,
            "y": 24
          },
          "hiddenSeries": false,
          "id": 34,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pluginVersion": "6.7.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (pod) (rate(compass_director_graphql_request_total[1m]) * 60)",
              "format": "time_series",
              "instant": false,
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{ pod }}",
              "refId": "A",
              "step": 4
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "GraphQL requests rate [req/min]",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:461",
              "format": "req/min",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:462",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "description": "",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 14,
            "x": 10,
            "y": 24
          },
          "hiddenSeries": false,
          "id": 33,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": false,
            "hideEmpty": true,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null as zero",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_director_graphql_request_duration_seconds_bucket[1m])) by (le))",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "50th percentile",
              "refId": "D",
              "step": 2
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_director_graphql_request_duration_seconds_bucket[1m])) by (le))",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "90th percentile",
              "refId": "A",
              "step": 2
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_director_graphql_request_duration_seconds_bucket[1m])) by (le))",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "95th percentile",
              "refId": "B",
              "step": 2
            },
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_director_graphql_request_duration_seconds_bucket[1m])) by (le))",
              "format": "time_series",
              "hide": false,
              "intervalFactor": 1,
              "legendFormat": "99th percentile",
              "refId": "C",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "GraphQL Request Handling Duration",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "s",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "editable": true,
          "error": false,
          "fill": 1,
          "fillGradient": 0,
          "grid": {
            "threshold1Color": "rgba(216, 200, 27, 0.27)",
            "threshold2Color": "rgba(234, 112, 112, 0.22)"
          },
          "gridPos": {
            "h": 7,
            "w": 12,
            "x": 0,
            "y": 31
          },
          "hiddenSeries": false,
          "id": 9,
          "isNew": false,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "hideEmpty": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 2,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sort_desc(sum by (pod) (rate(container_network_receive_bytes_total{pod=~\"compass-director-[^(tenant)].*\"}[1m])))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{pod}}",
              "refId": "A",
              "step": 30
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Network I/O",
          "tooltip": {
            "msResolution": true,
            "shared": true,
            "sort": 0,
            "value_type": "cumulative"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:1622",
              "format": "bytes",
              "logBase": 1,
              "show": true
            },
            {
              "$$hashKey": "object:1623",
              "format": "short",
              "logBase": 1,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 12,
            "x": 12,
            "y": 31
          },
          "hiddenSeries": false,
          "id": 23,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null as zero",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": true,
          "targets": [
            {
              "expr": "go_sql_stats_connections_in_use{db_name=\"director\"}",
              "format": "time_series",
              "instant": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{pod}} - In use",
              "refId": "A"
            },
            {
              "expr": "go_sql_stats_connections_idle{db_name=\"director\"}",
              "format": "time_series",
              "instant": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{pod}} - Idle",
              "refId": "B"
            },
            {
              "expr": "go_sql_stats_connections_max_open{db_name=\"director\"}",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{pod}} - Maximum",
              "refId": "C"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "DB connections",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:203",
              "decimals": 0,
              "format": "short",
              "label": "Average Queue Length",
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:204",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 38
          },
          "id": 40,
          "panels": [],
          "title": "Tenant Fetcher",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "description": "",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 39
          },
          "hiddenSeries": false,
          "id": 42,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": false,
            "hideEmpty": true,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null as zero",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "avg(kube_job_status_completion_time{job_name=~\"compass-tenant-fetcher-.*\"} - kube_job_status_start_time{job_name=~\"compass-tenant-fetcher-.*\"})",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "Average duration",
              "refId": "D",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Tenant Fetcher Job Average Duration",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:2364",
              "format": "s",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:2365",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": true,
          "cacheTimeout": null,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "decimals": null,
          "description": "",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 47
          },
          "hiddenSeries": false,
          "id": 43,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": false,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": false,
            "total": true,
            "values": true
          },
          "lines": false,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pluginVersion": "6.5.0",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(compass_tenantfetcher_eventing_requests_total) by (code, desc)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{ code }} ({{desc}})",
              "refId": "A",
              "step": 4
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Last Tenant Fetcher eventing requests by status code",
          "tooltip": {
            "shared": false,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "series",
            "name": null,
            "show": true,
            "values": [
              "total"
            ]
          },
          "yaxes": [
            {
              "$$hashKey": "object:347",
              "decimals": null,
              "format": "none",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:348",
              "decimals": null,
              "format": "none",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "description": "",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 47
          },
          "hiddenSeries": false,
          "id": 44,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "hideEmpty": true,
            "hideZero": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null as zero",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(compass_tenantfetcher_eventing_requests_total) by (code, desc)",
              "format": "time_series",
              "hide": false,
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{ code }} ({{ desc }})",
              "refId": "D",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Tenant Fetcher Eventing Requests By Status Code",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:138",
              "format": "none",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:139",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": false
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 55
          },
          "id": 29,
          "panels": [],
          "title": "External services (dependencies)",
          "type": "row"
        },
        {
          "cacheTimeout": null,
          "datasource": null,
          "description": "Total successful request ratio  since last counter restart",
          "gridPos": {
            "h": 8,
            "w": 6,
            "x": 0,
            "y": 56
          },
          "id": 46,
          "links": [],
          "options": {
            "colorMode": "value",
            "fieldOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "defaults": {
                "mappings": [
                  {
                    "$$hashKey": "object:369",
                    "id": 0,
                    "op": "=",
                    "text": "N/A",
                    "type": 1,
                    "value": "null"
                  }
                ],
                "max": 1,
                "min": 0,
                "nullValueMode": "connected",
                "thresholds": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-red",
                      "value": null
                    },
                    {
                      "color": "dark-orange",
                      "value": 0.5
                    },
                    {
                      "color": "light-orange",
                      "value": 0.6
                    },
                    {
                      "color": "light-yellow",
                      "value": 0.7
                    },
                    {
                      "color": "light-green",
                      "value": 0.8
                    },
                    {
                      "color": "semi-dark-green",
                      "value": 0.9
                    },
                    {
                      "color": "dark-green",
                      "value": 0.95
                    }
                  ]
                },
                "unit": "percentunit"
              },
              "overrides": [],
              "values": false
            },
            "graphMode": "area",
            "justifyMode": "center",
            "orientation": "horizontal"
          },
          "pluginVersion": "6.7.3",
          "targets": [
            {
              "expr": "sum(compass_director_hydra_request_total{code=~\"201|200\"}) / sum(compass_director_hydra_request_total)",
              "format": "time_series",
              "instant": false,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "%",
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Hydra successful requests ratio",
          "type": "stat"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 18,
            "x": 6,
            "y": 56
          },
          "hiddenSeries": false,
          "id": 38,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "rightSide": true,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "paceLength": 10,
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (code) (rate(compass_director_hydra_request_total[5m]) * 60)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{ code }}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Hydra request rate by status code [req/min]",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:565",
              "format": "req/min",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:566",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": "",
      "schemaVersion": 22,
      "style": "dark",
      "tags": [
        "kyma",
        "compass"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-30m",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ]
      },
      "timezone": "",
      "title": "Compass / Director",
      "uid": "RsjU_VRGz",
      "variables": {
        "list": []
      },
      "version": 1
    }
---
# Source: compass/charts/gateway/templates/dashboard-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-gateway-dashboard
  namespace: kyma-system
  labels:
    grafana_dashboard: "1"
    app: monitoring-grafana
data:
  compass-gateway-dashboard.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "links": [],
      "panels": [
        {
          "datasource": null,
          "description": "",
          "fieldConfig": {
            "defaults": {
              "custom": {
                "align": null
              },
              "mappings": [],
              "thresholds": {
                "mode": "percentage",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              }
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 3,
            "x": 0,
            "y": 0
          },
          "id": 2,
          "options": {
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "last"
              ],
              "fields": "",
              "values": false
            },
            "showThresholdLabels": false,
            "showThresholdMarkers": true
          },
          "pluginVersion": "7.0.6",
          "targets": [
            {
              "expr": "sum(compass_gateway_auditlog_channel_length)",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "timeFrom": null,
          "timeShift": null,
          "title": "Auditlog Channel",
          "type": "gauge"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "description": "",
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 3,
            "y": 0
          },
          "hiddenSeries": false,
          "id": 8,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (pod) (compass_gateway_auditlog_channel_length)",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Auditlog channel trends",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 5,
            "x": 15,
            "y": 0
          },
          "hiddenSeries": false,
          "id": 10,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "go_goroutines{service=\"compass-gateway-metrics\"}",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "go routines",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 8
          },
          "hiddenSeries": false,
          "id": 12,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null as zero",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": true,
          "targets": [
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_gateway_auditlog_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "",
              "legendFormat": "95th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_gateway_auditlog_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "",
              "legendFormat": "90th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_gateway_auditlog_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "",
              "legendFormat": "50th percentile",
              "refId": "C"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Auditlog requests duration in seconds",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:87",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:88",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": "10s",
      "schemaVersion": 25,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-30m",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ]
      },
      "timezone": "",
      "title": "Compass / Gateway",
      "uid": "AYkxiRAMz",
      "version": 1
    }
---
# Source: compass/charts/postgresql/templates/init-db-config-map.yaml
# This file is not part of official PostgreSQL chart
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-postgresql-db-init
data:
  init-director-db.sql: |
    CREATE DATABASE postgres;
---
# Source: compass/charts/prometheus-postgres-exporter/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-prometheus-postgres-exporter
  labels:
    app: prometheus-postgres-exporter
    chart: prometheus-postgres-exporter-1.3.0
    release: compass
    heritage: Helm
data:
  config.yaml: |
    pg_replication:
      query: "SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp())) as lag"
      master: true
      metrics:
        - lag:
            usage: "GAUGE"
            description: "Replication lag behind master in seconds"
    
    pg_postmaster:
      query: "SELECT pg_postmaster_start_time as start_time_seconds from pg_postmaster_start_time()"
      master: true
      metrics:
        - start_time_seconds:
            usage: "GAUGE"
            description: "Time at which postmaster started"
    
    pg_stat_user_tables:
      query: "SELECT current_database() datname, schemaname, relname, seq_scan, seq_tup_read, idx_scan, idx_tup_fetch, n_tup_ins, n_tup_upd, n_tup_del, n_tup_hot_upd, n_live_tup, n_dead_tup, n_mod_since_analyze, COALESCE(last_vacuum, '1970-01-01Z'), COALESCE(last_vacuum, '1970-01-01Z') as last_vacuum, COALESCE(last_autovacuum, '1970-01-01Z') as last_autovacuum, COALESCE(last_analyze, '1970-01-01Z') as last_analyze, COALESCE(last_autoanalyze, '1970-01-01Z') as last_autoanalyze, vacuum_count, autovacuum_count, analyze_count, autoanalyze_count FROM pg_stat_user_tables"
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of current database"
        - schemaname:
            usage: "LABEL"
            description: "Name of the schema that this table is in"
        - relname:
            usage: "LABEL"
            description: "Name of this table"
        - seq_scan:
            usage: "COUNTER"
            description: "Number of sequential scans initiated on this table"
        - seq_tup_read:
            usage: "COUNTER"
            description: "Number of live rows fetched by sequential scans"
        - idx_scan:
            usage: "COUNTER"
            description: "Number of index scans initiated on this table"
        - idx_tup_fetch:
            usage: "COUNTER"
            description: "Number of live rows fetched by index scans"
        - n_tup_ins:
            usage: "COUNTER"
            description: "Number of rows inserted"
        - n_tup_upd:
            usage: "COUNTER"
            description: "Number of rows updated"
        - n_tup_del:
            usage: "COUNTER"
            description: "Number of rows deleted"
        - n_tup_hot_upd:
            usage: "COUNTER"
            description: "Number of rows HOT updated (i.e., with no separate index update required)"
        - n_live_tup:
            usage: "GAUGE"
            description: "Estimated number of live rows"
        - n_dead_tup:
            usage: "GAUGE"
            description: "Estimated number of dead rows"
        - n_mod_since_analyze:
            usage: "GAUGE"
            description: "Estimated number of rows changed since last analyze"
        - last_vacuum:
            usage: "GAUGE"
            description: "Last time at which this table was manually vacuumed (not counting VACUUM FULL)"
        - last_autovacuum:
            usage: "GAUGE"
            description: "Last time at which this table was vacuumed by the autovacuum daemon"
        - last_analyze:
            usage: "GAUGE"
            description: "Last time at which this table was manually analyzed"
        - last_autoanalyze:
            usage: "GAUGE"
            description: "Last time at which this table was analyzed by the autovacuum daemon"
        - vacuum_count:
            usage: "COUNTER"
            description: "Number of times this table has been manually vacuumed (not counting VACUUM FULL)"
        - autovacuum_count:
            usage: "COUNTER"
            description: "Number of times this table has been vacuumed by the autovacuum daemon"
        - analyze_count:
            usage: "COUNTER"
            description: "Number of times this table has been manually analyzed"
        - autoanalyze_count:
            usage: "COUNTER"
            description: "Number of times this table has been analyzed by the autovacuum daemon"
    
    pg_statio_user_tables:
      query: "SELECT current_database() datname, schemaname, relname, heap_blks_read, heap_blks_hit, idx_blks_read, idx_blks_hit, toast_blks_read, toast_blks_hit, tidx_blks_read, tidx_blks_hit FROM pg_statio_user_tables"
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of current database"
        - schemaname:
            usage: "LABEL"
            description: "Name of the schema that this table is in"
        - relname:
            usage: "LABEL"
            description: "Name of this table"
        - heap_blks_read:
            usage: "COUNTER"
            description: "Number of disk blocks read from this table"
        - heap_blks_hit:
            usage: "COUNTER"
            description: "Number of buffer hits in this table"
        - idx_blks_read:
            usage: "COUNTER"
            description: "Number of disk blocks read from all indexes on this table"
        - idx_blks_hit:
            usage: "COUNTER"
            description: "Number of buffer hits in all indexes on this table"
        - toast_blks_read:
            usage: "COUNTER"
            description: "Number of disk blocks read from this table's TOAST table (if any)"
        - toast_blks_hit:
            usage: "COUNTER"
            description: "Number of buffer hits in this table's TOAST table (if any)"
        - tidx_blks_read:
            usage: "COUNTER"
            description: "Number of disk blocks read from this table's TOAST table indexes (if any)"
        - tidx_blks_hit:
            usage: "COUNTER"
            description: "Number of buffer hits in this table's TOAST table indexes (if any)"
    
    pg_database:
      query: "SELECT pg_database.datname, pg_database_size(pg_database.datname) as size FROM pg_database"
      master: true
      cache_seconds: 30
      metrics:
        - datname:
            usage: "LABEL"
            description: "Name of the database"
        - size_bytes:
            usage: "GAUGE"
            description: "Disk space used by the database"
    
    pg_stat_statements:
      query: "SELECT t2.rolname, t3.datname, queryid, calls, total_time / 1000 as total_time_seconds, min_time / 1000 as min_time_seconds, max_time / 1000 as max_time_seconds, mean_time / 1000 as mean_time_seconds, stddev_time / 1000 as stddev_time_seconds, rows, shared_blks_hit, shared_blks_read, shared_blks_dirtied, shared_blks_written, local_blks_hit, local_blks_read, local_blks_dirtied, local_blks_written, temp_blks_read, temp_blks_written, blk_read_time / 1000 as blk_read_time_seconds, blk_write_time / 1000 as blk_write_time_seconds FROM pg_stat_statements t1 join pg_roles t2 on (t1.userid=t2.oid) join pg_database t3 on (t1.dbid=t3.oid)"
      master: true
      metrics:
        - rolname:
            usage: "LABEL"
            description: "Name of user"
        - datname:
            usage: "LABEL"
            description: "Name of database"
        - queryid:
            usage: "LABEL"
            description: "Query ID"
        - calls:
            usage: "COUNTER"
            description: "Number of times executed"
        - total_time_seconds:
            usage: "COUNTER"
            description: "Total time spent in the statement, in milliseconds"
        - min_time_seconds:
            usage: "GAUGE"
            description: "Minimum time spent in the statement, in milliseconds"
        - max_time_seconds:
            usage: "GAUGE"
            description: "Maximum time spent in the statement, in milliseconds"
        - mean_time_seconds:
            usage: "GAUGE"
            description: "Mean time spent in the statement, in milliseconds"
        - stddev_time_seconds:
            usage: "GAUGE"
            description: "Population standard deviation of time spent in the statement, in milliseconds"
        - rows:
            usage: "COUNTER"
            description: "Total number of rows retrieved or affected by the statement"
        - shared_blks_hit:
            usage: "COUNTER"
            description: "Total number of shared block cache hits by the statement"
        - shared_blks_read:
            usage: "COUNTER"
            description: "Total number of shared blocks read by the statement"
        - shared_blks_dirtied:
            usage: "COUNTER"
            description: "Total number of shared blocks dirtied by the statement"
        - shared_blks_written:
            usage: "COUNTER"
            description: "Total number of shared blocks written by the statement"
        - local_blks_hit:
            usage: "COUNTER"
            description: "Total number of local block cache hits by the statement"
        - local_blks_read:
            usage: "COUNTER"
            description: "Total number of local blocks read by the statement"
        - local_blks_dirtied:
            usage: "COUNTER"
            description: "Total number of local blocks dirtied by the statement"
        - local_blks_written:
            usage: "COUNTER"
            description: "Total number of local blocks written by the statement"
        - temp_blks_read:
            usage: "COUNTER"
            description: "Total number of temp blocks read by the statement"
        - temp_blks_written:
            usage: "COUNTER"
            description: "Total number of temp blocks written by the statement"
        - blk_read_time_seconds:
            usage: "COUNTER"
            description: "Total time the statement spent reading blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)"
        - blk_write_time_seconds:
            usage: "COUNTER"
            description: "Total time the statement spent writing blocks, in milliseconds (if track_io_timing is enabled, otherwise zero)"
    
    compass_director_tenants_total:
      query: "SELECT COUNT(ID) as quantity FROM business_tenant_mappings;"
      master: true
      metrics:
        - quantity:
            usage: "COUNTER"
            description: "Total number of tenants in table"
    
    compass_director_tenants_active_total:
      query: "SELECT COUNT(ID) as quantity FROM business_tenant_mappings WHERE status='Active';"
      master: true
      metrics:
        - quantity:
            usage: "COUNTER"
            description: "Number of active tenants in table"
    
    compass_director_used_tenants:
      query: "SELECT COUNT (DISTINCT tenants.tenant_id) FROM (SELECT tenant_id FROM runtimes UNION ALL SELECT tenant_id FROM applications) tenants;"
      master: true
      metrics:
        - quantity:
            usage: "COUNTER"
            description: "Number of tenants which are assigned to at least one runtime or application"
    
    compass_director_applications_total:
      query: "SELECT COUNT(ID) as quantity FROM applications;"
      master: true
      metrics:
        - quantity:
            usage: "COUNTER"
            description: "Total number of applications in table"
    
    compass_director_runtimes_total:
      query: "SELECT COUNT(ID) as quantity FROM runtimes;"
      master: true
      metrics:
        - quantity:
            usage: "COUNTER"
            description: "Total number of runtimes in table"
---
# Source: compass/charts/prometheus-postgres-exporter/templates/dashboard-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-prometheus-postgres-exporter-dashboard
  namespace: kyma-system
  labels:
    grafana_dashboard: "1"
    app: monitoring-grafana
data:
  compass-postgres-dashboard.json: |-
    {
      "annotations": {
        "list": [
          {
            "$$hashKey": "object:25",
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "This dashboard works with postgres_exporter for prometheus",
      "editable": true,
      "gnetId": 9628,
      "graphTooltip": 0,
      "id": 10215,
      "iteration": 1590490860608,
      "links": [],
      "panels": [
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 34,
          "panels": [],
          "title": "General Counters, CPU, Memory and File Descriptor Stats",
          "type": "row"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": true,
          "colors": [
            "#299c46",
            "#7eb26d",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "none",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 4,
            "x": 0,
            "y": 1
          },
          "id": 36,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "$$hashKey": "object:10110",
              "name": "value to text",
              "value": 1
            },
            {
              "$$hashKey": "object:10111",
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "pg_static{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}",
              "format": "time_series",
              "instant": true,
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{short_version}}",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Version",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "$$hashKey": "object:10113",
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "name"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "none",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 5,
            "x": 4,
            "y": 1
          },
          "id": 38,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_max_connections{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Max Connections",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "avg"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "datasource": "Prometheus",
          "format": "decbytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 5,
            "x": 9,
            "y": 1
          },
          "height": "200px",
          "id": 10,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "SUM(pg_stat_database_tup_fetched{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "",
              "refId": "A",
              "step": 4
            }
          ],
          "thresholds": "",
          "title": "Current fetch data",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "datasource": "Prometheus",
          "format": "decbytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 5,
            "x": 14,
            "y": 1
          },
          "height": "200px",
          "id": 11,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "SUM(pg_stat_database_tup_inserted{datname=~\"$datname\",namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "",
              "refId": "A",
              "step": 4
            }
          ],
          "thresholds": "",
          "title": "Current insert data",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "datasource": "Prometheus",
          "format": "decbytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 5,
            "x": 19,
            "y": 1
          },
          "height": "200px",
          "id": 12,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "SUM(pg_stat_database_tup_updated{datname=~\"$datname\", namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "",
              "refId": "A",
              "step": 4
            }
          ],
          "thresholds": "",
          "title": "Current update data",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "description": "Average user and system CPU time spent in seconds.",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 4
          },
          "hiddenSeries": false,
          "id": 22,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "avg(rate(process_cpu_seconds_total{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]) * 1000)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "CPU Time",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Average CPU Usage",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "s",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "description": "Virtual and Resident memory size in bytes, averages over 5 min interval",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 4
          },
          "hiddenSeries": false,
          "id": 24,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "avg(rate(process_resident_memory_bytes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "Resident Mem",
              "refId": "A"
            },
            {
              "expr": "avg(rate(process_virtual_memory_bytes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "Virtual Mem",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Average Memory Usage",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "decbytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "description": "Number of open file descriptors",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 4
          },
          "hiddenSeries": false,
          "id": 26,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(process_open_fds{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "Open FD",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Open File Descriptors",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "decimals": null,
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 11
          },
          "id": 32,
          "panels": [],
          "title": "Settings",
          "type": "row"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 3,
            "x": 0,
            "y": 12
          },
          "id": 40,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_shared_buffers_bytes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Shared Buffers",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 3,
            "x": 3,
            "y": 12
          },
          "id": 42,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_effective_cache_size_bytes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Effective Cache",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 3,
            "x": 6,
            "y": 12
          },
          "id": 44,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_maintenance_work_mem_bytes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Maintenance Work Mem",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 3,
            "x": 9,
            "y": 12
          },
          "id": 46,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_work_mem_bytes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Work Mem",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "decimals": 1,
          "format": "bytes",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 3,
            "x": 12,
            "y": 12
          },
          "id": 48,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_max_wal_size_bytes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Max WAL Size",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "none",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 3,
            "x": 15,
            "y": 12
          },
          "id": 50,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_random_page_cost{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Random Page Cost",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "none",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 2,
            "x": 18,
            "y": 12
          },
          "id": 52,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_seq_page_cost{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Seq Page Cost",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "none",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 2,
            "x": 20,
            "y": 12
          },
          "id": 54,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_max_worker_processes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Max Worker Processes",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "avg"
        },
        {
          "cacheTimeout": null,
          "colorBackground": false,
          "colorValue": false,
          "colors": [
            "#299c46",
            "rgba(237, 129, 40, 0.89)",
            "#d44a3a"
          ],
          "datasource": "Prometheus",
          "format": "none",
          "gauge": {
            "maxValue": 100,
            "minValue": 0,
            "show": false,
            "thresholdLabels": false,
            "thresholdMarkers": true
          },
          "gridPos": {
            "h": 3,
            "w": 2,
            "x": 22,
            "y": 12
          },
          "id": 56,
          "interval": null,
          "links": [],
          "mappingType": 1,
          "mappingTypes": [
            {
              "name": "value to text",
              "value": 1
            },
            {
              "name": "range to text",
              "value": 2
            }
          ],
          "maxDataPoints": 100,
          "nullPointMode": "connected",
          "nullText": null,
          "postfix": "",
          "postfixFontSize": "50%",
          "prefix": "",
          "prefixFontSize": "50%",
          "rangeMaps": [
            {
              "from": "null",
              "text": "N/A",
              "to": "null"
            }
          ],
          "sparkline": {
            "fillColor": "rgba(31, 118, 189, 0.18)",
            "full": false,
            "lineColor": "rgb(31, 120, 193)",
            "show": false
          },
          "tableColumn": "",
          "targets": [
            {
              "expr": "sum(pg_settings_max_parallel_workers{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"})",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": "",
          "title": "Max Parallel Workers",
          "type": "singlestat",
          "valueFontSize": "80%",
          "valueMaps": [
            {
              "op": "=",
              "text": "N/A",
              "value": "null"
            }
          ],
          "valueName": "current"
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 15
          },
          "id": 30,
          "panels": [],
          "title": "Database Stats",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 16
          },
          "hiddenSeries": false,
          "id": 1,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": false,
            "rightSide": false,
            "show": true,
            "sort": "current",
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": false,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "connected",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 3,
          "points": true,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(pg_stat_activity_count{datname=~\"$datname\", namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", state=\"active\"} !=0) by (datname, state)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{datname}}, state: {{state}}",
              "refId": "A",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Active sessions",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:10190",
              "decimals": 0,
              "format": "none",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:10191",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 16
          },
          "hiddenSeries": false,
          "id": 60,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(irate(pg_stat_database_xact_commit{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", datname=~\"$datname\"}[5m])) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{datname}} commits",
              "refId": "A"
            },
            {
              "expr": "sum(irate(pg_stat_database_xact_rollback{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", datname=~\"$datname\"}[5m])) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{datname}} rollbacks",
              "refId": "B"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Transactions",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:3528",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:3529",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 16
          },
          "hiddenSeries": false,
          "id": 8,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "sideWidth": null,
            "sort": "current",
            "sortDesc": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(pg_stat_database_tup_updated{datname=~\"$datname\", namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"} != 0) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{datname}}",
              "refId": "A",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Update data",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:3601",
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:3602",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 23
          },
          "hiddenSeries": false,
          "id": 5,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "sort": "current",
            "sortDesc": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(pg_stat_database_tup_fetched{datname=~\"$datname\", namespace=\"compass-system\", pod=~\"compass-prometheus-postgres-exporter-.*\"} != 0) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{datname}}",
              "refId": "A",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Fetch data (SELECT)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:3674",
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:3675",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 23
          },
          "hiddenSeries": false,
          "id": 6,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "sort": "current",
            "sortDesc": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(pg_stat_database_tup_inserted{datname=~\"$datname\", namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"} != 0) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{datname}}",
              "refId": "A",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Insert data",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:3747",
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:3748",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "decimals": 0,
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 23
          },
          "hiddenSeries": false,
          "id": 3,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "hideEmpty": false,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "sort": "current",
            "sortDesc": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(pg_locks_count{datname=~\"$datname\", namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", mode=~\"$mode\"} != 0) by (datname, mode)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{datname}}, {{mode}}",
              "refId": "A",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Lock tables",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:10318",
              "decimals": 0,
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:10319",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 30
          },
          "hiddenSeries": false,
          "id": 14,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "sort": "total",
            "sortDesc": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(pg_stat_database_tup_returned{datname=~\"$datname\", namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"} != 0) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{datname}}",
              "refId": "A",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Return data",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:10806",
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:10807",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 30
          },
          "hiddenSeries": false,
          "id": 4,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "max": true,
            "min": false,
            "rightSide": false,
            "show": true,
            "sort": "current",
            "sortDesc": false,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(pg_stat_activity_count{datname=~\"$datname\", namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", state=~\"idle|idle in transaction|idle in transaction (aborted)\"}) by (datname, state)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{datname}}, state: {{state}}",
              "refId": "A",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Idle sessions",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:10490",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:10491",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 30
          },
          "hiddenSeries": false,
          "id": 7,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "sort": "current",
            "sortDesc": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(pg_stat_database_tup_deleted{datname=~\"$datname\", namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"} != 0) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 2,
              "legendFormat": "{{datname}}",
              "refId": "A",
              "step": 2
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Delete data",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:10404",
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:10405",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "decimals": 2,
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 37
          },
          "hiddenSeries": false,
          "id": 62,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum (pg_stat_database_blks_hit{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", datname=~\"$datname\"}) by (datname) / (sum(pg_stat_database_blks_read{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", datname=~\"$datname\"}) by (datname) + sum(pg_stat_database_blks_hit{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", datname=~\"$datname\"}) by (datname))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ datname }}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Cache Hit Rate",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:10976",
              "decimals": 4,
              "format": "percentunit",
              "label": "",
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:10977",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 8,
            "y": 37
          },
          "hiddenSeries": false,
          "id": 64,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "rightSide": false,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(irate(pg_stat_bgwriter_buffers_backend{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "buffers_backend",
              "refId": "A"
            },
            {
              "expr": "sum(irate(pg_stat_bgwriter_buffers_alloc{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "buffers_alloc",
              "refId": "B"
            },
            {
              "expr": "sum(irate(pg_stat_bgwriter_buffers_backend_fsync{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "backend_fsync",
              "refId": "C"
            },
            {
              "expr": "sum(irate(pg_stat_bgwriter_buffers_checkpoint{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "buffers_checkpoint",
              "refId": "D"
            },
            {
              "expr": "sum(irate(pg_stat_bgwriter_buffers_clean{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "buffers_clean",
              "refId": "E"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Buffers (bgwriter)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:10649",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "$$hashKey": "object:10650",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "decimals": 0,
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 16,
            "y": 37
          },
          "hiddenSeries": false,
          "id": 66,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(irate(pg_stat_database_conflicts{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", datname=~\"$datname\"}[5m])) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{datname}} conflicts",
              "refId": "B"
            },
            {
              "expr": "sum(irate(pg_stat_database_deadlocks{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", datname=~\"$datname\"}[5m])) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{datname}} deadlocks",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Conflicts/Deadlocks",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:10576",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:10577",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "description": "Total amount of data written to temporary files by queries in this database. All temporary files are counted, regardless of why the temporary file was created, and regardless of the log_temp_files setting.",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 8,
            "x": 0,
            "y": 44
          },
          "hiddenSeries": false,
          "id": 68,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": false,
            "min": false,
            "rightSide": false,
            "show": true,
            "total": true,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(irate(pg_stat_database_temp_bytes{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\", datname=~\"$datname\"}[5m])) by (datname)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ datname }}",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Temp File (Bytes)",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:11062",
              "format": "bytes",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:11063",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 7,
            "w": 16,
            "x": 8,
            "y": 44
          },
          "hiddenSeries": false,
          "id": 70,
          "legend": {
            "alignAsTable": true,
            "avg": true,
            "current": true,
            "max": true,
            "min": true,
            "show": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "dataLinks": []
          },
          "percentage": false,
          "pointradius": 5,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum(irate(pg_stat_bgwriter_checkpoint_write_time{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "write_time - Total amount of time that has been spent in the portion of checkpoint processing where files are written to disk.",
              "refId": "B"
            },
            {
              "expr": "sum(irate(pg_stat_bgwriter_checkpoint_sync_time{namespace=\"compass-system\",pod=~\"compass-prometheus-postgres-exporter-.*\"}[5m]))",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "sync_time - Total amount of time that has been spent in the portion of checkpoint processing where files are synchronized to disk.",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Checkpoint Stats",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "ms",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": "",
      "schemaVersion": 22,
      "style": "dark",
      "tags": [
        "kyma",
        "compass",
        "postgres",
        "db",
        "stats"
      ],
      "templating": {
        "list": [
          {
            "auto": true,
            "auto_count": 200,
            "auto_min": "1s",
            "current": {
              "selected": false,
              "text": "auto",
              "value": "$__auto_interval_interval"
            },
            "hide": 0,
            "label": "Interval",
            "name": "interval",
            "options": [
              {
                "selected": true,
                "text": "auto",
                "value": "$__auto_interval_interval"
              },
              {
                "selected": false,
                "text": "1s",
                "value": "1s"
              },
              {
                "selected": false,
                "text": "5s",
                "value": "5s"
              },
              {
                "selected": false,
                "text": "1m",
                "value": "1m"
              },
              {
                "selected": false,
                "text": "5m",
                "value": "5m"
              },
              {
                "selected": false,
                "text": "1h",
                "value": "1h"
              },
              {
                "selected": false,
                "text": "6h",
                "value": "6h"
              },
              {
                "selected": false,
                "text": "1d",
                "value": "1d"
              }
            ],
            "query": "1s,5s,1m,5m,1h,6h,1d",
            "refresh": 2,
            "skipUrlSync": false,
            "type": "interval"
          },
          {
            "allValue": null,
            "current": {
              "selected": false,
              "tags": [],
              "text": "All",
              "value": [
                "$__all"
              ]
            },
            "datasource": "Prometheus",
            "definition": "label_values(datname)",
            "hide": 0,
            "includeAll": true,
            "index": -1,
            "label": "Database",
            "multi": true,
            "name": "datname",
            "options": [],
            "query": "label_values(datname)",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 1,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          },
          {
            "allValue": null,
            "current": {
              "selected": false,
              "tags": [],
              "text": "All",
              "value": [
                "$__all"
              ]
            },
            "datasource": "Prometheus",
            "definition": "",
            "hide": 0,
            "includeAll": true,
            "index": -1,
            "label": "Lock table",
            "multi": true,
            "name": "mode",
            "options": [],
            "query": "label_values({mode=~\"accessexclusivelock|accesssharelock|exclusivelock|rowexclusivelock|rowsharelock|sharelock|sharerowexclusivelock|shareupdateexclusivelock\"}, mode)",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "tagValuesQuery": "",
            "tags": [],
            "tagsQuery": "",
            "type": "query",
            "useTags": false
          }
        ]
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
          "5s",
          "10s",
          "30s",
          "1m",
          "5m",
          "15m",
          "30m",
          "1h",
          "2h",
          "1d"
        ],
        "time_options": [
          "5m",
          "15m",
          "1h",
          "6h",
          "12h",
          "24h",
          "2d",
          "7d",
          "30d"
        ]
      },
      "timezone": "",
      "title": "Compass / Database",
      "uid": "000000039",
      "variables": {
        "list": []
      },
      "version": 4
    }
---
# Source: compass/charts/system-broker/templates/dashboard-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-system-broker-dashboard
  namespace: kyma-system
  labels:
    grafana_dashboard: "1"
    app: monitoring-grafana
data:
  compass-system-broker-dashboard.json: |-
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "Compass System-broker component",
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": 40,
      "links": [],
      "panels": [
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 8,
          "panels": [],
          "title": "Catalog",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 1
          },
          "hiddenSeries": false,
          "id": 6,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_catalog_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_catalog_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_catalog_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90 percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_catalog_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Catalog request duration",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 1
          },
          "hiddenSeries": false,
          "id": 4,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (pod) (rate(compass_system_broker_catalog_request_total[1m]) * 60)",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Catalog request rate [req/min]",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 9
          },
          "hiddenSeries": false,
          "id": 2,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_catalog_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_catalog_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_catalog_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90th percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_catalog_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Catalog response size",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 17
          },
          "id": 11,
          "panels": [],
          "title": "Provision",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 18
          },
          "hiddenSeries": false,
          "id": 9,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_provision_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_provision_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_provision_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90 percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_provision_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Provision request duration",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 18
          },
          "hiddenSeries": false,
          "id": 12,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (pod) (rate(compass_system_broker_provision_request_total[1m]) * 60)",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Provision request rate [req/min]",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 26
          },
          "hiddenSeries": false,
          "id": 13,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_provision_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_provision_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_provision_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90th percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_provision_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Provision response size",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 35
          },
          "id": 15,
          "panels": [],
          "title": "Deprovision",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 36
          },
          "hiddenSeries": false,
          "id": 21,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_deprovision_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_deprovision_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_deprovision_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90 percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_deprovision_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Deprovision request duration",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 36
          },
          "hiddenSeries": false,
          "id": 25,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (pod) (rate(compass_system_broker_deprovision_request_total[1m]) * 60)",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Deprovision request rate [req/min]",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 44
          },
          "hiddenSeries": false,
          "id": 28,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_deprovision_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_deprovision_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_deprovision_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90th percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_deprovision_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Deprovision response size",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 53
          },
          "id": 17,
          "panels": [],
          "title": "Bind",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 54
          },
          "hiddenSeries": false,
          "id": 22,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_bind_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_bind_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_bind_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90 percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_bind_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Bind request duration",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 54
          },
          "hiddenSeries": false,
          "id": 24,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (pod) (rate(compass_system_broker_bind_request_total[1m]) * 60)",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Bind request rate [req/min]",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 62
          },
          "hiddenSeries": false,
          "id": 27,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_bind_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_bind_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_bind_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90th percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_bind_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Bind response size",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 71
          },
          "id": 19,
          "panels": [],
          "title": "Unbind",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 72
          },
          "hiddenSeries": false,
          "id": 20,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_unbind_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_unbind_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_unbind_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90 percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_unbind_request_duration_seconds_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Unbind request duration",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 72
          },
          "hiddenSeries": false,
          "id": 23,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (pod) (rate(compass_system_broker_unbind_request_total[1m]) * 60)",
              "interval": "",
              "legendFormat": "",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Unbind request rate [req/min]",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": null,
          "fieldConfig": {
            "defaults": {
              "custom": {}
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 9,
            "w": 12,
            "x": 0,
            "y": 80
          },
          "hiddenSeries": false,
          "id": 26,
          "legend": {
            "avg": false,
            "current": false,
            "max": false,
            "min": false,
            "show": true,
            "total": false,
            "values": false
          },
          "lines": true,
          "linewidth": 1,
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "percentage": false,
          "pluginVersion": "7.3.3",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "histogram_quantile(0.99, sum(irate(compass_system_broker_unbind_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "99th percentile",
              "refId": "A"
            },
            {
              "expr": "histogram_quantile(0.95, sum(irate(compass_system_broker_unbind_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "95th percentile",
              "refId": "B"
            },
            {
              "expr": "histogram_quantile(0.90, sum(irate(compass_system_broker_unbind_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "90th percentile",
              "refId": "C"
            },
            {
              "expr": "histogram_quantile(0.50, sum(irate(compass_system_broker_unbind_response_size_bucket[1m])) by (le))",
              "interval": "",
              "legendFormat": "50th percentile",
              "refId": "D"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Unbind response size",
          "tooltip": {
            "shared": true,
            "sort": 0,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            },
            {
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": "10s",
      "schemaVersion": 26,
      "style": "dark",
      "tags": [
          "kyma",
          "compass"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Compass/System-broker",
      "uid": "991eVsuGz",
      "version": 7
    }
---
# Source: compass/templates/general-dashboard-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: compass-general-dashboard
  namespace: kyma-system
  labels:
    grafana_dashboard: "1"
    app: monitoring-grafana
data:
  compass-general-dashboard.json: |-
    {
      "annotations": {
        "list": [
          {
            "$$hashKey": "object:7",
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "description": "Compass General metrics",
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "links": [],
      "panels": [
        {
          "collapsed": false,
          "datasource": null,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 36,
          "panels": [],
          "title": "Request handling",
          "type": "row"
        },
        {
          "aliasColors": {},
          "bars": false,
          "dashLength": 10,
          "dashes": false,
          "datasource": "Prometheus",
          "fieldConfig": {
            "defaults": {
              "custom": {},
              "links": []
            },
            "overrides": []
          },
          "fill": 1,
          "fillGradient": 0,
          "gridPos": {
            "h": 10,
            "w": 24,
            "x": 0,
            "y": 1
          },
          "hiddenSeries": false,
          "id": 38,
          "legend": {
            "alignAsTable": true,
            "avg": false,
            "current": true,
            "hideEmpty": false,
            "hideZero": true,
            "max": true,
            "min": false,
            "rightSide": true,
            "show": true,
            "sort": "max",
            "sortDesc": true,
            "total": false,
            "values": true
          },
          "lines": true,
          "linewidth": 1,
          "links": [],
          "nullPointMode": "null",
          "options": {
            "alertThreshold": true
          },
          "paceLength": 10,
          "percentage": false,
          "pluginVersion": "7.4.0",
          "pointradius": 2,
          "points": false,
          "renderer": "flot",
          "seriesOverrides": [
            {
              "$$hashKey": "object:115"
            }
          ],
          "spaceLength": 10,
          "stack": false,
          "steppedLine": false,
          "targets": [
            {
              "expr": "sum by (client_id, auth_flow, details) (increase(compass_director_total_requests_per_client[2m])/2)",
              "format": "time_series",
              "interval": "",
              "intervalFactor": 1,
              "legendFormat": "{{ client_id }} ( {{ auth_flow }} {{ details }} )",
              "refId": "A"
            }
          ],
          "thresholds": [],
          "timeFrom": null,
          "timeRegions": [],
          "timeShift": null,
          "title": "Incoming requests rate by client ID [req/min]",
          "tooltip": {
            "shared": true,
            "sort": 2,
            "value_type": "individual"
          },
          "type": "graph",
          "xaxis": {
            "buckets": null,
            "mode": "time",
            "name": null,
            "show": true,
            "values": []
          },
          "yaxes": [
            {
              "$$hashKey": "object:565",
              "format": "req/min",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": "0",
              "show": true
            },
            {
              "$$hashKey": "object:566",
              "format": "short",
              "label": null,
              "logBase": 1,
              "max": null,
              "min": null,
              "show": true
            }
          ],
          "yaxis": {
            "align": false,
            "alignLevel": null
          }
        }
      ],
      "refresh": "",
      "schemaVersion": 27,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-1h",
        "to": "now"
      },
      "timepicker": {
        "refresh_intervals": [
            "5s",
            "10s",
            "30s",
            "1m",
            "5m",
            "15m",
            "30m",
            "1h",
            "2h",
            "1d"
        ]
      },
      "timezone": "",
      "title": "Compass / General",
      "uid": "wvGxC74nz",
      "version": 1
    }
---
# Source: compass/templates/migrator-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: compass-director-migrations
  namespace: compass-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app: compass
    release: compass
spec:
  storageClassName: standard
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: compass/charts/operations-controller/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: operations.operations.compass
spec:
  group: operations.compass
  names:
    kind: Operation
    listKind: OperationList
    plural: operations
    singular: operation
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.operation_type
      name: Type
      type: string
    - jsonPath: .spec.resource_id
      name: Resource ID
      type: string
    - jsonPath: .spec.resource_type
      name: Resource Type
      type: string
    - jsonPath: .status.phase
      name: Status
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Operation is the Schema for the operations API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: OperationSpec defines the desired state of Operation
            properties:
              correlation_id:
                type: string
              operation_category:
                type: string
              operation_id:
                type: string
              operation_type:
                enum:
                - Create
                - Update
                - Delete
                type: string
              request_object:
                type: string
              resource_id:
                type: string
              resource_type:
                type: string
              webhook_ids:
                items:
                  type: string
                type: array
            required:
            - correlation_id
            - operation_category
            - operation_id
            - operation_type
            - request_object
            - resource_id
            - resource_type
            - webhook_ids
            type: object
          status:
            description: OperationStatus defines the observed state of Operation
            properties:
              conditions:
                items:
                  description: Condition defines the states which the Operation CR can take
                  properties:
                    message:
                      type: string
                    status:
                      type: string
                    type:
                      enum:
                      - Ready
                      - Error
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              initialized_at:
                format: date-time
                type: string
              observed_generation:
                format: int64
                type: integer
              phase:
                enum:
                - Success
                - Failed
                - In Progress
                type: string
              webhooks:
                items:
                  description: Webhook is an entity part of the OperationStatus which holds information about the progression of the webhook execution
                  properties:
                    last_poll_timestamp:
                      type: string
                    retries_count:
                      type: integer
                    state:
                      enum:
                      - Success
                      - Failed
                      - In Progress
                      type: string
                    webhook_id:
                      type: string
                    webhook_poll_url:
                      type: string
                  required:
                  - last_poll_timestamp
                  - retries_count
                  - state
                  - webhook_id
                  - webhook_poll_url
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: compass-operations-controller-manager-role
rules:
- apiGroups:
  - operations.compass
  resources:
  - operations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operations.compass
  resources:
  - operations/status
  verbs:
  - get
  - patch
  - update
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: compass-operations-controller-proxy-role
rules:
  - apiGroups:
      - authentication.k8s.io
    resources:
      - tokenreviews
    verbs:
      - create
  - apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
    verbs:
      - create
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: compass-operations-controller-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: compass-operations-controller-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: compass-operations-controller-manager-role
subjects:
- kind: ServiceAccount
  name: compass-operations-controller
  namespace: default
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: compass-operations-controller-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: compass-operations-controller-proxy-role
subjects:
- kind: ServiceAccount
  name: compass-operations-controller
  namespace: default
---
# Source: compass/templates/jwks_cluster_binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oidc-reviewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:service-account-issuer-discovery
subjects:
  - apiGroup: rbac.authorization.k8s.io
    kind: User
    name: system:anonymous
---
# Source: compass/charts/connector/templates/certs-setup-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: connector-certs-setup-job-ca-cert-role
  namespace: compass-system
  labels:
    app: connector-certs-setup-job
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
  - apiGroups: ["*"]
    resources: ["secrets"]
    verbs: ["create", "get", "update"]
---
# Source: compass/charts/connector/templates/certs-setup-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: connector-certs-setup-job-connector-cert-role
  namespace: istio-system
  labels:
    app: connector-certs-setup-job
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
  - apiGroups: ["*"]
    resources: ["secrets"]
    verbs: ["create", "get", "update"]
---
# Source: compass/charts/connector/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-connector-compass-connector-app-ca
  namespace: compass-system
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
- apiGroups: ["*"]
  resources: ["secrets"]
  resourceNames: ["compass-connector-app-ca"]
  verbs: ["get"]
---
# Source: compass/charts/connector/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-connector-compass-gateway-mtls-certs-cacert
  namespace: istio-system
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
- apiGroups: ["*"]
  resources: ["secrets"]
  resourceNames: ["compass-gateway-mtls-certs-cacert"]
  verbs: ["get"]
---
# Source: compass/charts/connector/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-connector-revocations-config
  namespace: default
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
- apiGroups: ["*"]
  resources: ["configmaps"]
  resourceNames: ["revocations-config"]
  verbs: ["get", "update", "watch"]
---
# Source: compass/charts/director/templates/external-certificate-rotation-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: director-external-certificate-rotation
  namespace: default
  labels:
    app: director
    release: compass
    helm.sh/chart: director-0.1.0
    app.kubernetes.io/name: director
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
  - apiGroups: ["*"]
    resources: ["secrets"]
    verbs: ["get", "create", "update", "patch"]
---
# Source: compass/charts/director/templates/external-certificate-rotation-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: director-external-client-certificate
  namespace: default
  labels:
    app: director
    release: compass
    helm.sh/chart: director-0.1.0
    app.kubernetes.io/name: director
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
  - apiGroups: ["*"]
    resources: ["secrets"]
    resourceNames: ["external-client-certificate"]
    verbs: ["watch"]
---
# Source: compass/charts/director/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-director-operations-scheduler-role
  namespace: default
rules:
  - apiGroups:
      - operations.compass
    resources:
      - operations
    verbs:
      - create
      - get
      - list
      - patch
      - update
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-operations-controller-leader-election-role
  namespace: default
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps/status
  verbs:
  - get
  - update
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
---
# Source: compass/charts/prometheus-postgres-exporter/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: compass-prometheus-postgres-exporter
  labels:
    app: prometheus-postgres-exporter
    chart: prometheus-postgres-exporter-1.3.0
    heritage: Helm
    release: compass
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [compass-prometheus-postgres-exporter]
---
# Source: compass/charts/system-broker/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-system-broker
  namespace: default
  labels:
    app: system-broker
    release: compass
    helm.sh/chart: system-broker-0.1.0
    app.kubernetes.io/name: system-broker
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
- apiGroups: ["*"]
  resources: ["secrets"]
  verbs: ["get"]
---
# Source: compass/templates/tests/connector/service-account.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-compass-revocations-config-tests
  namespace: default
  labels:
    app: connector-tests
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
  - apiGroups: ["*"]
    resources: ["configmaps"]
    resourceNames: ["revocations-config"]
    verbs: ["get", "update"]
---
# Source: compass/templates/tests/director/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-e2e-director
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
- apiGroups: ["*"]
  resources: ["secrets"]
  resourceNames: ["compass-connector-app-ca" , "external-client-certificate"]
  verbs: ["get"]
---
# Source: compass/templates/tests/ord-service/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-e2e-ord-service
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
- apiGroups: ["*"]
  resources: ["secrets"]
  resourceNames: ["compass-connector-app-ca"]
  verbs: ["get"]
---
# Source: compass/templates/tests/system-fetcher/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-e2e-system-fetcher
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
- apiGroups: ["*"]
  resources: ["jobs"]
  resourceNames: ["system-fetcher-test", "system-fetcher-test2"]
  verbs: ["get", "delete"]
- apiGroups: ["*"]
  resources: ["jobs"]
  resourceNames: []
  verbs: ["create"]
- apiGroups: ["*"]
  resources: ["cronjobs"]
  resourceNames: ["compass-system-fetcher"]
  verbs: ["get"]
- apiGroups: ["operations.compass"]
  resources: ["operations"]
  verbs: ["get"]
---
# Source: compass/templates/tests/tenant-fetcher-job/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: compass-e2e-tenant-fetcher
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
rules:
- apiGroups: ["*"]
  resources: ["jobs"]
  resourceNames: ["tenant-fetcher-account-test", "tenant-fetcher-subaccount-test"]
  verbs: ["get", "delete"]
- apiGroups: ["*"]
  resources: ["jobs"]
  resourceNames: []
  verbs: ["create"]
- apiGroups: ["*"]
  resources: ["cronjobs"]
  resourceNames: ["compass-tenant-fetcher-account-fetcher", "compass-tenant-fetcher-subaccount-fetcher"]
  verbs: ["get"]
---
# Source: compass/charts/connector/templates/certs-setup-role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: connector-certs-setup-job-ca-cert-rolebinding
  namespace: compass-system
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
  - kind: ServiceAccount
    name: connector-certs-setup-job
    namespace: default
roleRef:
  kind: Role
  name: connector-certs-setup-job-ca-cert-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/connector/templates/certs-setup-role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: connector-certs-setup-job-connector-cert-rolebinding
  namespace: istio-system
  labels:
    app: connector-certs-setup-job
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
  - kind: ServiceAccount
    name: connector-certs-setup-job
    namespace: default
roleRef:
  kind: Role
  name: connector-certs-setup-job-connector-cert-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/connector/templates/role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-connector-compass-connector-app-ca
  namespace: compass-system
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
- kind: ServiceAccount
  name: compass-connector
  namespace: default
roleRef:
  kind: Role
  name: compass-connector-compass-connector-app-ca
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/connector/templates/role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-connector-compass-gateway-mtls-certs-cacert
  namespace: istio-system
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
- kind: ServiceAccount
  name: compass-connector
  namespace: default
roleRef:
  kind: Role
  name: compass-connector-compass-gateway-mtls-certs-cacert
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/connector/templates/role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-connector-revocations-config
  namespace: default
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
- kind: ServiceAccount
  name: compass-connector
  namespace: default
roleRef:
  kind: Role
  name: compass-connector-revocations-config
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/director/templates/external-certificate-rotation-job.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: director-external-certificate-rotation
  namespace: default
  labels:
    app: director
    release: compass
    helm.sh/chart: director-0.1.0
    app.kubernetes.io/name: director
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
  - kind: ServiceAccount
    name: director-external-certificate-rotation
    namespace: default
roleRef:
  kind: Role
  name: director-external-certificate-rotation
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/director/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: compass-director-operations-scheduler-role-binding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: compass-director-operations-scheduler-role
subjects:
  - kind: ServiceAccount
    name: compass-director
    namespace: default
---
# Source: compass/charts/director/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-director
  namespace: default
  labels:
    app: director
    release: compass
    helm.sh/chart: director-0.1.0
    app.kubernetes.io/name: director
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
  - kind: ServiceAccount
    name: compass-director
    namespace: default
roleRef:
  kind: Role
  name: director-external-client-certificate
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: compass-operations-controller-leader-election-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: compass-operations-controller-leader-election-role
subjects:
- kind: ServiceAccount
  name: compass-operations-controller
  namespace: default
---
# Source: compass/charts/operations-controller/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: compass-operations-controller-secrets-rolebinding
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: director-external-client-certificate
subjects:
  - kind: ServiceAccount
    name: compass-operations-controller
    namespace: default
---
# Source: compass/charts/pairing-adapter/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-pairing-adapter
  namespace: default
  labels:
    app: pairing-adapter
    release: compass
    helm.sh/chart: pairing-adapter-0.1.0
    app.kubernetes.io/name: pairing-adapter
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
  - kind: ServiceAccount
    name: compass-pairing-adapter
    namespace: default
roleRef:
  kind: Role
  name: director-external-client-certificate
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/prometheus-postgres-exporter/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: compass-prometheus-postgres-exporter
  labels:
    app: prometheus-postgres-exporter
    chart: prometheus-postgres-exporter-1.3.0
    heritage: Helm
    release: compass
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: compass-prometheus-postgres-exporter
subjects:
- kind: ServiceAccount
  name: compass-prometheus-postgres-exporter
---
# Source: compass/charts/system-broker/templates/rbac.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-system-broker
  namespace: default
  labels:
    app: system-broker
    release: compass
    helm.sh/chart: system-broker-0.1.0
    app.kubernetes.io/name: system-broker
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
- kind: ServiceAccount
  name: compass-system-broker
  namespace: default
roleRef:
  kind: Role
  name: compass-system-broker
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/templates/ord-aggregator-job.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-ord-aggregator
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
  - kind: ServiceAccount
    name: compass-ord-aggregator
    namespace: default
roleRef:
  kind: Role
  name: director-external-client-certificate
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/templates/system-fetcher-job.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-system-fetcher
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
  - kind: ServiceAccount
    name: compass-system-fetcher
    namespace: default
roleRef:
  kind: Role
  name: director-external-client-certificate
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/templates/tests/connector/service-account.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-compass-revocations-config-tests
  namespace: default
  labels:
    app: connector-tests
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
  - kind: ServiceAccount
    name: compass-connector-tests
    namespace: kyma-system
roleRef:
  kind: Role
  name: compass-compass-revocations-config-tests
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/templates/tests/director/role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-e2e-director
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
- kind: ServiceAccount
  name: compass-e2e-director
  namespace: kyma-system
roleRef:
  kind: Role
  name: compass-e2e-director
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/templates/tests/ord-service/role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-e2e-ord-service
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
- kind: ServiceAccount
  name: compass-e2e-ord-service
  namespace: kyma-system
roleRef:
  kind: Role
  name: compass-e2e-ord-service
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/templates/tests/system-fetcher/role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-e2e-system-fetcher
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
- kind: ServiceAccount
  name: compass-e2e-system-fetcher
  namespace: kyma-system
roleRef:
  kind: Role
  name: compass-e2e-system-fetcher
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/templates/tests/tenant-fetcher-job/role-binding.yaml
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: compass-e2e-tenant-fetcher
  namespace: default
  labels:
    app: compass
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
subjects:
- kind: ServiceAccount
  name: compass-e2e-tenant-fetcher
  namespace: kyma-system
roleRef:
  kind: Role
  name: compass-e2e-tenant-fetcher
  apiGroup: rbac.authorization.k8s.io
---
# Source: compass/charts/cockpit/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-cockpit
  labels:
    app: cockpit
    release: compass
spec:
  ports:
    - port: 81
      targetPort: 81      
      protocol: TCP
      name: http2
    - port: 8888
      targetPort: 8888      
      protocol: TCP
      name: http2-mf
  selector:
    app: cockpit
    release: compass
---
# Source: compass/charts/connectivity-adapter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-connectivity-adapter
  namespace: default
  labels:
    app: connectivity-adapter
    release: compass
    helm.sh/chart: connectivity-adapter-0.1.0
    app.kubernetes.io/name: connectivity-adapter
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http
    - port: 15020
      protocol: TCP
      name: proxy-status
  selector:
    app: connectivity-adapter
    release: compass
---
# Source: compass/charts/connector/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-connector
  namespace: default
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  type: ClusterIP
  ports:
    - port: 3000
      protocol: TCP
      name: http-gql-ext
    - port: 8080
      protocol: TCP
      name: http-validator
    - port: 15020
      protocol: TCP
      name: proxy-status
  selector:
    app: connector
    release: compass
---
# Source: compass/charts/director/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-director
  namespace: default
  labels:
    app: director
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 3000
      protocol: TCP
      name: http
    - port: 3002
      protocol: TCP
      name: http-internal
    - port: 15020
      protocol: TCP
      name: proxy-status
    - port: 8080
      protocol: TCP
      name: http-validator
  selector:
    app: director
    release: compass
---
# Source: compass/charts/director/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-director-metrics
  namespace: default
  labels:
    app: director
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 3003
      protocol: TCP
      name: metrics
  selector:
    app: director
    release: compass
---
# Source: compass/charts/gateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-gateway
  namespace: default
  labels:
    app: gateway
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 3000
      protocol: TCP
      name: http
    - port: 15020
      protocol: TCP
      name: proxy-status
  selector:
    app: gateway
    release: compass
---
# Source: compass/charts/gateway/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-gateway-metrics
  namespace: default
  labels:
    app: gateway
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 3001
      protocol: TCP
      name: metrics
  selector:
    app: gateway
    release: compass
---
# Source: compass/charts/operations-controller/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-operations-controller-metrics
  namespace: default
  labels:
    app: operations-controller
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 3001
      protocol: TCP
      name: metrics
  selector:
    app: operations-controller
    release: compass
---
# Source: compass/charts/ord-service/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-ord-service
  namespace: default
  labels:
    app: ord-service
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 3000
      protocol: TCP
      name: http
    - port: 15020
      protocol: TCP
      name: proxy-status
  selector:
    app: ord-service
    release: compass
---
# Source: compass/charts/pairing-adapter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
    name: compass-pairing-adapter
    namespace: default
    labels:
        app: pairing-adapter
        release: compass
spec:
    type: ClusterIP
    ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
    - port: 15020
      protocol: TCP
      name: proxy-status
    selector:
        app: pairing-adapter
        release: compass
---
# Source: compass/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-postgresql-headless
  namespace: default
  labels:
    app: postgresql
    chart: postgresql-5.3.11
    release: "compass"
    heritage: "Helm"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "compass"
---
# Source: compass/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-postgresql
  namespace: default
  labels:
    app: postgresql
    chart: postgresql-5.3.11
    release: "compass"
    heritage: "Helm"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "compass"
    role: master
---
# Source: compass/charts/prometheus-postgres-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-prometheus-postgres-exporter
  labels:
    app: prometheus-postgres-exporter
    chart: prometheus-postgres-exporter-1.3.0
    release: compass
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 9187
      protocol: TCP
      name: http
  selector:
    app: prometheus-postgres-exporter
    release: compass
---
# Source: compass/charts/system-broker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-system-broker
  namespace: default
  labels:
    app: system-broker
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 5001
      protocol: TCP
      name: http
    - port: 15020
      protocol: TCP
      name: proxy-status
  selector:
    app: system-broker
    release: compass
---
# Source: compass/charts/system-broker/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-system-broker-metrics
  namespace: default
  labels:
    app: system-broker
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 5002
      protocol: TCP
      name: metrics
  selector:
    app: system-broker
    release: compass
---
# Source: compass/charts/tenant-fetcher/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-tenant-fetcher
  namespace: default
  labels:
    app: tenant-fetcher
    release: compass
spec:
  type: ClusterIP
  ports:
    - port: 3000
      protocol: TCP
      name: http
    - port: 15020
      protocol: TCP
      name: proxy-status
  selector:
    app: tenant-fetcher
    release: compass
---
# Source: compass/templates/tests/connector/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-connector-ts
  namespace: kyma-system
  labels:
    app: compass-connector-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-connector-tests-app
---
# Source: compass/templates/tests/director/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-director-ts
  namespace: kyma-system
  labels:
    app: compass-director-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-director-tests-app
---
# Source: compass/templates/tests/external-services-mock/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-external-services-mock-ts
  namespace: kyma-system
  labels:
    app: compass-external-services-mock-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-external-services-mock-tests-app
---
# Source: compass/templates/tests/gateway/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-gateway-ts
  namespace: kyma-system
  labels:
    app: compass-gateway-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-gateway-tests-app
---
# Source: compass/templates/tests/istio/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-istio-ts
  namespace: kyma-system
  labels:
    app: compass-istio-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-istio-tests-app
---
# Source: compass/templates/tests/ord-aggregator/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-ord-aggregator-ts
  namespace: kyma-system
  labels:
    app: compass-ord-aggregator-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-ord-aggregator-tests-app
---
# Source: compass/templates/tests/ord-service/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-ord-service-ts
  namespace: kyma-system
  labels:
    app: compass-ord-service-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-ord-service-tests-app
---
# Source: compass/templates/tests/pairing-adapter/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-pairing-adapter-ts
  namespace: kyma-system
  labels:
    app: compass-pairing-adapter-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-pairing-adapter-tests-app
---
# Source: compass/templates/tests/system-broker/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: compass-e2e-system-broker-ts
  namespace: kyma-system
  labels:
    app: compass-system-broker-tests-app
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: 5000
    protocol: TCP
    name: http-token-server
  selector:
    app: compass-system-broker-tests-app
---
# Source: compass/charts/cockpit/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-cockpit
  namespace: default
  labels:
    app: cockpit
    release: compass
spec:
  selector:
    matchLabels:
      app: cockpit
      release: compass
  strategy:
    {}
  template:
    metadata:
      labels:
        app: cockpit
        release: compass
    spec:
      containers:
        - name: cockpit
          image: eu.gcr.io/kyma-project/incubator/compass-console:PR-51
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 6082
            initialDelaySeconds: 10
          ports:
            - containerPort: 6082
            - containerPort: 81
            - containerPort: 8888
          resources:
            {}
          volumeMounts:
          - name: config
            mountPath: /var/public/config
          - name: config
            mountPath: /var/public-luigi/config
      nodeSelector:
        {}  
      volumes:
        - name: config
          configMap:
            name: compass-cockpit
            items:
            - key: config.js
              path: config.js
---
# Source: compass/charts/connectivity-adapter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-connectivity-adapter
  namespace: default
  labels:
    app: connectivity-adapter
    release: compass
    helm.sh/chart: connectivity-adapter-0.1.0
    app.kubernetes.io/name: connectivity-adapter
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  replicas: 1
  selector:
    matchLabels:
      app: connectivity-adapter
      release: compass
  strategy:
    {}
  template:
    metadata:
      labels:
        app: connectivity-adapter
        release: compass
        helm.sh/chart: connectivity-adapter-0.1.0
        app.kubernetes.io/name: connectivity-adapter
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: compass
    spec:
      nodeSelector:
        {}
      containers:
        - name: connectivity-adapter
          image: eu.gcr.io/kyma-project/incubator/compass-connectivity-adapter:PR-2138
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
          env:
            - name: APP_ADDRESS
              value: "0.0.0.0:8080"
            - name: APP_APP_REGISTRY_DIRECTOR_ENDPOINT
              value: "http://compass-gateway.default.svc.cluster.local:3000/director/graphql"
            - name: APP_CONNECTOR_CONNECTOR_ENDPOINT
              value: "http://compass-gateway.default.svc.cluster.local:3000/connector/graphql"
            - name: APP_CONNECTOR_ADAPTER_BASE_URL
              value: "https://adapter-gateway.kyma.local-test"
            - name: APP_CONNECTOR_ADAPTER_MTLS_BASE_URL
              value: "https://adapter-gateway-mtls.kyma.local-test"
            - name: APP_LOG_FORMAT
              value: "kibana"
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          livenessProbe:
            httpGet:
              port: 8080
              path: "/v1/health"
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              port: 8080
              path: "/v1/health"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 2
---
# Source: compass/charts/connector/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-connector
  namespace: default
  labels:
    app: connector
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  replicas: 1
  selector:
    matchLabels:
      app: connector
      release: compass
  strategy:
    {}
  template:
    metadata:
      labels:
        app: connector
        release: compass
        helm.sh/chart: connector-0.1.0
        app.kubernetes.io/name: connector
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: compass
    spec:
      
      serviceAccountName: compass-connector
      nodeSelector:
        {}
      containers:
        - name: connector
          image: eu.gcr.io/kyma-project/incubator/compass-connector:PR-2143
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-gql-ext
              containerPort: 3000
              protocol: TCP
            - name: http-validator
              containerPort: 8080
              protocol: TCP
          resources:
            {}
          env:
            - name: APP_EXTERNAL_ADDRESS
              value: "0.0.0.0:3000"
            - name: APP_HYDRATOR_ADDRESS
              value: "0.0.0.0:8080"
            - name: APP_PLAYGROUND_API_ENDPOINT
              value: "/connector/graphql"
            - name: APP_LOG_FORMAT
              value: "kibana"
            - name: APP_CERTIFICATE_VALIDITY_TIME
              value: "2160h"
            - name: APP_CA_SECRET_NAME
              value: "compass-system/compass-connector-app-ca"
            - name: APP_CA_SECRET_CERTIFICATE_KEY
              value: "ca.crt"
            - name: APP_CA_SECRET_KEY_KEY
              value: "ca.key"
            
            - name: APP_CERTIFICATE_DATA_HEADER
              value: "Certificate-Data"
            - name: APP_REVOCATION_CONFIG_MAP_NAME
              value: "default/revocations-config"
            - name: APP_CSR_SUBJECT_COUNTRY
              value: "DE"
            - name: APP_CSR_SUBJECT_ORGANIZATION
              value: "Org"
            - name: APP_CSR_SUBJECT_ORGANIZATIONAL_UNIT
              value: "OrgUnit"
            - name: APP_CSR_SUBJECT_LOCALITY
              value: "locality"
            - name: APP_CSR_SUBJECT_PROVINCE
              value: "province"
            - name: APP_EXTERNAL_ISSUER_SUBJECT_COUNTRY
              value: "DE"
            - name: APP_EXTERNAL_ISSUER_SUBJECT_ORGANIZATION
              value: "SAP SE"
            - name: APP_EXTERNAL_ISSUER_SUBJECT_ORGANIZATIONAL_UNIT_PATTERN
              value: "Region|SAP Cloud Platform Clients"
            - name: APP_DIRECTOR_URL
              value: "https://compass-gateway-mtls.kyma.local-test/director/graphql"
            - name: APP_CERTIFICATE_SECURED_CONNECTOR_URL
              value: "https://compass-gateway-mtls.kyma.local-test/connector/graphql"
            - name: APP_KUBERNETES_CLIENT_POLL_INTERVAL
              value: "2s"
            - name: APP_KUBERNETES_CLIENT_POLL_TIMEOUT
              value: "1m"
            - name: APP_ONE_TIME_TOKEN_URL
              value: "https://compass-gateway-internal.kyma.local-test/director/graphql"
            - name: APP_HTTP_CLIENT_SKIP_SSL_VALIDATION
              value: "false"
            - name: APP_SUBJECT_CONSUMER_MAPPING_CONFIG
              value: "[{\"consumer_type\": \"Integration System\", \"tenant_access_levels\": [\"account\",\"subaccount\"], \"subject\": \"C=DE, L=local, O=SAP SE, OU=Region, OU=SAP Cloud Platform Clients, OU=123e4567-e89b-12d3-a456-426614174001, CN=compass\"}]"
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          livenessProbe:
            httpGet:
              port: 3000
              path: "/healthz"
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              port: 3000
              path: "/healthz"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 2
---
# Source: compass/charts/director/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-director
  namespace: default
  labels:
    app: director
    release: compass
spec:
  replicas: 1
  selector:
    matchLabels:
      app: director
      release: compass
  strategy:
    {}
  template:
    metadata:
      annotations:
        restartOnNewInstallationMarker: "z62lr" # Restarts the deployment on a new Helm installation. (https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments)
        
        
        
        
      labels:
        app: director
        release: compass
    spec:
      serviceAccountName: compass-director
      nodeSelector:
        {}
      containers:
        - name: director
          image: eu.gcr.io/kyma-project/incubator/compass-director:PR-2160
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: http-validator
              containerPort: 8080
              protocol: TCP
            - name: http-internal
              containerPort: 3002
              protocol: TCP
            - name: metrics
              containerPort: 3003
              protocol: TCP
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          env:
            - name: APP_ADDRESS
              value: "0.0.0.0:3000"
            - name: APP_HYDRATOR_ADDRESS
              value: "0.0.0.0:8080"
            - name: APP_INTERNAL_ADDRESS
              value: "0.0.0.0:3002"
            - name: APP_METRICS_ADDRESS
              value: "0.0.0.0:3003"
            - name: APP_METRICS_ENABLE_CLIENT_ID_INSTRUMENTATION
              value: "true"
            - name: APP_METRICS_CENSORED_FLOWS
              value: "JWT"
            - name: APP_PLAYGROUND_API_ENDPOINT
              value: "/director/graphql"
            - name: APP_JWKS_ENDPOINT
              value: http://ory-oathkeeper-api.kyma-system.svc.cluster.local:4456/.well-known/jwks.json
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: APP_DB_MAX_OPEN_CONNECTIONS
              value: "30"
            - name: APP_DB_MAX_IDLE_CONNECTIONS
              value: "2"
            - name: APP_ONE_TIME_TOKEN_LENGTH
              value: "64"
            - name: APP_ONE_TIME_TOKEN_RUNTIME_EXPIRATION
              value: "60m"
            - name: APP_ONE_TIME_TOKEN_APPLICATION_EXPIRATION
              value: "5m"
            - name: APP_ONE_TIME_TOKEN_CSR_EXPIRATION
              value: "5m"
            - name: APP_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: APP_LOG_FORMAT
              value: "kibana"
            - name: APP_OPERATION_PATH
              value: /operation
            - name: APP_LAST_OPERATION_PATH
              value: /last_operation
            - name: APP_CONNECTOR_URL
              value: "https://compass-gateway.kyma.local-test/connector/graphql"
            - name: APP_CONFIGURATION_FILE
              value: /config/config.yaml
            - name: APP_CLIENT_ID_HTTP_HEADER
              value: client_user
            - name: APP_OAUTH20_URL
              value: http://ory-hydra-admin.kyma-system.svc.cluster.local:4445
            - name: APP_OAUTH20_PUBLIC_ACCESS_TOKEN_ENDPOINT
              value: "https://oauth2.kyma.local-test/oauth2/token"
            - name: APP_LEGACY_CONNECTOR_URL
              value: "https://adapter-gateway.kyma.local-test/v1/applications/signingRequests/info"
            - name: APP_SUGGEST_TOKEN_HTTP_HEADER
              value: suggest_token
            - name: APP_INFO_API_ENDPOINT
              value: /v1/info
            - name: APP_INFO_CERT_SUBJECT
              value: "C=DE, O=SAP SE, OU=SAP Cloud Platform Clients, OU=Region, OU=123e4567-e89b-12d3-a456-426614174001, L=local, CN=compass"
            - name: APP_INFO_CERT_ISSUER
              value: C=DE, L=local, O=SAP SE, OU=SAP Cloud Platform Clients, CN=compass-ca
            - name: APP_INFO_ROOT_CA
              valueFrom:
                secretKeyRef:
                  name: compass-gateway-mtls-certs-cacert
                  key: cacert
            - name: APP_DEFAULT_SCENARIO_ENABLED
              value: "true"
            - name: APP_HEALTH_CONFIG_INDICATORS
              value: "{database,5s,1s,1s,3}"
            - name: APP_SCHEMA_MIGRATION_VERSION
              valueFrom:
                configMapKeyRef:
                  name: expected-schema-version
                  key: schemaVersion
            - name: APP_DATALOADER_MAX_BATCH
              value: "200"
            - name: APP_DATALOADER_WAIT
              value: "10ms"
            - name: APP_SUBSCRIPTION_PROVIDER_LABEL_KEY
              value: subscriptionProviderId
            - name: APP_CONSUMER_SUBACCOUNT_IDS_LABEL_KEY
              value: consumer_subaccount_ids
            - name: APP_SELF_REGISTER_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: client-id
            - name: APP_SELF_REGISTER_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: client-secret
            - name: APP_SELF_REGISTER_URL
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: url
            - name: APP_SELF_REGISTER_OAUTH_TOKEN_PATH
              value: /secured/oauth/token
            - name: APP_SELF_REGISTER_DISTINGUISH_LABEL_KEY
              value: distinguishingLabel
            - name: APP_SELF_REGISTER_LABEL_KEY
              value: selfRegLabel
            - name: APP_SELF_REGISTER_LABEL_KEY_PATTERN
              value: "^selfRegLabel$"
            - name: APP_SELF_REGISTER_LABEL_VALUE_PREFIX
              value: self-reg-prefix-
            - name: APP_SELF_REGISTER_RESPONSE_KEY
              value: self-reg-key
            - name: APP_SELF_REGISTER_PATH
              value: /external-api/self-reg
            - name: APP_SELF_REGISTER_NAME_QUERY_PARAM
              value: name
            - name: APP_SELF_REGISTER_TENANT_QUERY_PARAM
              value: tenant
            - name: APP_SELF_REGISTER_REQUEST_BODY_PATTERN
              value: "{\"key\": \"%s\"}"
            - name: APP_SELF_REGISTER_SKIP_SSL_VALIDATION
              value: "false"
            - name: APP_EXTERNAL_CLIENT_CERT_SECRET
              value: "compass-system/external-client-certificate"
            - name: APP_EXTERNAL_CLIENT_CERT_KEY
              value: "tls.crt"
            - name: APP_EXTERNAL_CLIENT_KEY_KEY
              value: "tls.key"
          livenessProbe:
            httpGet:
              port: 3000
              path: "/livez"
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              port: 3000
              path: "/readyz"
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 5
          volumeMounts:
            - mountPath: /config
              name: director-config
            - mountPath: /data/static-users.yaml
              name: static-users
              subPath: static-users.yaml
            - mountPath: /data/static-groups.yaml
              name: static-groups
              subPath: static-groups.yaml
            

        
      volumes:
        - name: director-config
          configMap:
            name: compass-director-config
        - name: static-users
          configMap:
            name: compass-director-static-users
        - name: static-groups
          configMap:
            name: compass-director-static-groups
---
# Source: compass/charts/gateway/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-gateway
  namespace: default
  labels:
    app: gateway
    release: compass
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
      release: compass
  strategy:
    {}
  template:
    metadata:
      annotations:
        restartOnNewInstallationMarker: "MUyQp" # Restarts the deployment on a new Helm installation. (https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments)
      labels:
        app: gateway
        release: compass
    spec:
      nodeSelector:
        {}
      containers:
        - name: gateway
          image: eu.gcr.io/kyma-project/incubator/compass-gateway:PR-2126
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: metrics
              containerPort: 3001
              protocol: TCP
          resources:
            {}
          env:
            - name: APP_ADDRESS
              value: "0.0.0.0:3000"
            - name: APP_DIRECTOR_ORIGIN
              value: "http://compass-director.default.svc.cluster.local:3000"
            - name: APP_METRICS_ADDRESS
              value: "0.0.0.0:3001"
            - name: APP_CONNECTOR_ORIGIN
              value: "http://compass-connector.default.svc.cluster.local:3000"
            - name: APP_LOG_FORMAT
              value: "kibana"
            - name: APP_AUDITLOG_ENABLED
              value: "false"
            
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          livenessProbe:
            httpGet:
              port: 3000
              path: "/healthz"
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              port: 3000
              path: "/healthz"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 2
---
# Source: compass/charts/operations-controller/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: operations-controller
    release: compass
    control-plane: controller-manager
  name: compass-operations-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        app: operations-controller
        release: compass
        control-plane: controller-manager
    spec:
      
      serviceAccountName: compass-operations-controller
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.5.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - env:
          - name: SERVER_METRIC_ADDRESS
            value: ":3001"
          - name: SERVER_HEALTH_ADDRESS
            value: ":3002"
          - name: SERVER_ENABLE_LEADER_ELECTION
            value: "true"
          - name: GRAPHQL_CLIENT_GRAPHQL_ENDPOINT
            value: "https://compass-gateway-internal.kyma.local-test/director/graphql"
          - name: DIRECTOR_OPERATION_ENDPOINT
            value: "https://compass-gateway-internal.kyma.local-test/operation"
          - name: HTTP_CLIENT_SKIP_SSL_VALIDATION
            value: "false"
          - name: EXTERNAL_CLIENT_CERT_SECRET
            value: "compass-system/external-client-certificate"
        image: eu.gcr.io/kyma-project/incubator/compass-operations-controller:PR-2132
        name: operations-controller
        ports:
          - name: metrics
            containerPort: 3001
            protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
      terminationGracePeriodSeconds: 10
---
# Source: compass/charts/ord-service/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-ord-service
  namespace: default
  labels:
    app: ord-service
    release: compass
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ord-service
      release: compass
  strategy:
    {}
  template:
    metadata:
      annotations:
        
        
        
        
      labels:
        app: ord-service
        release: compass
    spec:
      serviceAccountName: compass-ord-service
      nodeSelector:
        {}
      containers:
        - name: ord-service
          image: eu.gcr.io/kyma-project/incubator/compass-ord-service:PR-53
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          env:
            - name: SERVER_PORT
              value: "3000"
            - name: SERVER_SELF_URL
              value: "https://compass-gateway.kyma.local-test"
            - name: SCHEMA_MIGRATION_VERSION
              valueFrom:
                configMapKeyRef:
                  name: expected-schema-version
                  key: schemaVersion
            - name: SERVER_DEFAULT_RESPONSE_TYPE
              value: xml
            - name: ODATA_JPA_REQUEST_MAPPING_PATH
              value: open-resource-discovery-service/v0
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: SPRING_DATASOURCE_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: SPRING_DATASOURCE_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: SPRING_DATASOURCE_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
          livenessProbe:
            httpGet:
              port: 3000
              path: "/actuator/health/liveness"
            initialDelaySeconds: 60
            timeoutSeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              port: 3000
              path: "/actuator/health/readiness"
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 5
          volumeMounts:
---
# Source: compass/charts/pairing-adapter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
    name: "compass-pairing-adapter-adapter-local-mtls"
    namespace: default
    labels:
        app: pairing-adapter
        release: compass
        system: adapter-local-mtls
spec:
    replicas: 1
    selector:
        matchLabels:
            app: pairing-adapter
            release: compass
            system: adapter-local-mtls
    strategy:
        {}
    template:
        metadata:
            annotations:
                restartOnNewInstallationMarker: "fzrBa" # Restarts the deployment on a new Helm installation. (https://helm.sh/docs/howto/charts_tips_and_tricks/#automatically-roll-deployments)
            labels:
                app: pairing-adapter
                release: compass
                system: adapter-local-mtls
        spec:

            serviceAccountName: compass-pairing-adapter
            nodeSelector:
              {}
            containers:
            - name: pairing-adapter
              image: eu.gcr.io/kyma-project/incubator/pairing-adapter:PR-2118
              imagePullPolicy: IfNotPresent
              env:
              - name: MAPPING_TEMPLATE_EXTERNAL_URL

                value: https://compass-external-services-mock-sap-mtls.kyma.local-test/cert/token

              - name: MAPPING_TEMPLATE_HEADERS
                value: "{\"Content-Type\":[\"application/json\"]}"
              - name: MAPPING_TEMPLATE_JSON_BODY
                value: "{}"
              - name: MAPPING_TEMPLATE_TOKEN_FROM_RESPONSE
                value: "{{.access_token}}"
              - name: AUTH_TYPE
                value: mtls

              - name: EXTERNAL_CLIENT_CERT_SECRET
                value: "compass-system/external-client-certificate"
              - name: SKIP_SSL_VERIFY
                value: "true"

              - name: LOG_FORMAT
                value: "kibana"
              ports:
              - name: http
                containerPort: 8080
                protocol: TCP
              resources:
                {}
              securityContext:
                allowPrivilegeEscalation: false
                runAsUser: 2000
              livenessProbe:
                  httpGet:
                      port: 8080
                      path: "/healthz"
                  initialDelaySeconds: 30
                  timeoutSeconds: 1
                  periodSeconds: 10
              readinessProbe:
                  httpGet:
                      port: 8080
                      path: "/healthz"
                  initialDelaySeconds: 5
                  timeoutSeconds: 1
                  periodSeconds: 2
---
# Source: compass/charts/prometheus-postgres-exporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-prometheus-postgres-exporter
  labels:
    app: prometheus-postgres-exporter
    chart: prometheus-postgres-exporter-1.3.0
    release: compass
    heritage: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-postgres-exporter
      release: compass
  template:
    metadata:
      labels:
        app: prometheus-postgres-exporter
        release: compass
      annotations:
        checksum/config: 90672a95782ba8f5e42a8467de57c6ac0b15377ee10555a3a839b682d63b41dc
    spec:
      serviceAccountName: compass-prometheus-postgres-exporter
      containers:
        - name: prometheus-postgres-exporter
          args:
          - "--extend.query-path=/etc/config.yaml"
          env:
          - name: DATA_SOURCE_URI
            value: "compass-postgresql:5432/postgres?sslmode=disable"
          - name: DATA_SOURCE_USER
            value: postgres
          - name: DATA_SOURCE_PASS
            valueFrom:
              secretKeyRef:
                name: compass-postgresql
                key: postgresql-director-password
          image: "wrouesnel/postgres_exporter:v0.8.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 9187
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {}
          volumeMounts:
            - name: queries
              mountPath: /etc/config.yaml
              subPath: config.yaml
            
      securityContext:
        {}
      volumes:
      - configMap:
          defaultMode: 420
          name: compass-prometheus-postgres-exporter
        name: queries
---
# Source: compass/charts/system-broker/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-system-broker
  namespace: default
  labels:
    app: system-broker
    release: compass
spec:
  replicas: 1
  selector:
    matchLabels:
      app: system-broker
      release: compass
  strategy:
    {}
  template:
    metadata:
      labels:
        app: system-broker
        release: compass
    spec:
      
      serviceAccountName: compass-system-broker
      nodeSelector:
        {}
      containers:
        - name: system-broker
          image: eu.gcr.io/kyma-project/incubator/compass-system-broker:PR-2132
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 5001
              protocol: TCP
            - name: metrics
              containerPort: 5002
              protocol: TCP
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          env:
            - name: SERVER_PORT
              value: "5001"
            - name: SERVER_SELF_URL
              value: "https://compass-gateway-mtls.kyma.local-test"
            - name: GRAPHQL_CLIENT_GRAPHQL_ENDPOINT
              value: "http://compass-gateway.default.svc.cluster.local:3000/director/graphql"
            - name: HTTP_CLIENT_SKIP_SSL_VALIDATION
              value: "false"
            - name: HTTP_CLIENT_FORWARD_HEADERS
              value: "Authorization"
            - name: ORD_SERVICE_URL
              value: "https://compass-gateway-mtls.kyma.local-test"
            - name: ORD_STATIC_PATH
              value: "/open-resource-discovery-static/v0"
            - name: METRICS_PORT
              value: "5002"
            - name: LOG_FORMAT
              value: "kibana"
          livenessProbe:
            httpGet:
              path: /healthz
              port: 5001
            periodSeconds: 10
            timeoutSeconds: 3
            initialDelaySeconds: 30
          readinessProbe:
            httpGet:
              path: /readyz
              port: 5001
            periodSeconds: 5
            timeoutSeconds: 2
            initialDelaySeconds: 10
---
# Source: compass/charts/tenant-fetcher/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-tenant-fetcher
  namespace: default
  labels:
    app: tenant-fetcher
    release: compass
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tenant-fetcher
      release: compass
  strategy:
    {}
  template:
    metadata:
      annotations:
        
        
        
        
      labels:
        app: tenant-fetcher
        release: compass
    spec:
      serviceAccountName: compass-tenant-fetcher
      nodeSelector:
        {}
      containers:
        - name: tenant-fetcher
          image: eu.gcr.io/kyma-project/incubator/compass-director:PR-2160
          imagePullPolicy: IfNotPresent
          command:
            - "/bin/sh"
          args:
              - "-c"
              - "./tenantfetcher-svc; exit_code=$?; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          resources:
            {}
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 2000
          env:
            - name: APP_TENANT_PROVIDER_TENANT_ID_PROPERTY
              value: tenantId
            - name: APP_TENANT_PROVIDER_CUSTOMER_ID_PROPERTY
              value: customerId
            - name: APP_TENANT_PROVIDER_SUBACCOUNT_TENANT_ID_PROPERTY
              value: subaccountTenantId
            - name: APP_TENANT_PROVIDER_SUBDOMAIN_PROPERTY
              value: subdomain
            - name: APP_TENANT_PROVIDER
              value: provider
            - name: APP_TENANT_PROVIDER_SUBSCRIPTION_PROVIDER_ID_PROPERTY
              value: subscriptionProviderId
            - name: APP_SUBSCRIPTION_PROVIDER_LABEL_KEY
              value: subscriptionProviderId
            - name: APP_CONSUMER_SUBACCOUNT_IDS_LABEL_KEY
              value: consumer_subaccount_ids
            - name: APP_DEFAULT_SCENARIO_ENABLED
              value: "true"
            - name: APP_LOG_FORMAT
              value: "kibana"
            - name: APP_ADDRESS
              value: "0.0.0.0:3000"
            - name: APP_ROOT_API
              value: "/tenants"
            - name: APP_HANDLER_ENDPOINT
              value: "/v1/callback/{tenantId}"
            - name: APP_REGIONAL_HANDLER_ENDPOINT
              value: "/v1/regional/{region}/callback/{tenantId}"
            - name: APP_DEPENDENCIES_ENDPOINT
              value: "/v1/dependencies"
            - name: APP_TENANT_PATH_PARAM
              value: "tenantId"
            - name: APP_REGION_PATH_PARAM
              value: "region"
            - name: APP_JWKS_ENDPOINT
              value: "http://ory-oathkeeper-api.kyma-system.svc.cluster.local:4456/.well-known/jwks.json"
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: APP_DB_MAX_OPEN_CONNECTIONS
              value: "2"
            - name: APP_DB_MAX_IDLE_CONNECTIONS
              value: "1"
            - name: APP_SUBSCRIPTION_CALLBACK_SCOPE
              value: "Callback"
          livenessProbe:
            httpGet:
              port: 3000
              path: "/tenants/healthz"
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            httpGet:
              port: 3000
              path: "/tenants/readyz"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 2
---
# Source: compass/charts/connectivity-adapter/templates/horizontal-pod-autoscaler.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: compass-connectivity-adapter
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compass-connectivity-adapter
  targetCPUUtilizationPercentage: 80
---
# Source: compass/charts/connector/templates/horizontal-pod-autoscaler.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: compass-connector
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compass-connector
  targetCPUUtilizationPercentage: 80
---
# Source: compass/charts/director/templates/horizontal-pod-autoscaler.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: compass-director
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compass-director
  targetCPUUtilizationPercentage: 80
---
# Source: compass/charts/gateway/templates/horizontal-pod-autoscaler.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: compass-gateway
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compass-gateway
  targetCPUUtilizationPercentage: 80
---
# Source: compass/charts/ord-service/templates/horizontal-pod-autoscaler.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: compass-ord-service
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compass-ord-service
  targetCPUUtilizationPercentage: 80
---
# Source: compass/charts/system-broker/templates/horizontal-pod-autoscaler.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: compass-system-broker
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compass-system-broker
  targetCPUUtilizationPercentage: 80
---
# Source: compass/charts/tenant-fetcher/templates/horizontal-pod-autoscaler.yaml
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: compass-tenant-fetcher
  namespace: default
spec:
  minReplicas: 1
  maxReplicas: 1
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: compass-tenant-fetcher
  targetCPUUtilizationPercentage: 80
---
# Source: compass/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: compass-postgresql
  namespace: default
  labels:
    app: postgresql
    chart: postgresql-5.3.11
    release: "compass"
    heritage: "Helm"
spec:
  serviceName: compass-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "compass"
      role: master
  template:
    metadata:
      name: compass-postgresql
      labels:
        app: postgresql
        chart: postgresql-5.3.11
        release: "compass"
        heritage: "Helm"
        role: master
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
      - name: init-chmod-data
        image: docker.io/bitnami/minideb:stretch
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        command:
          - sh
          - -c
          - |
            mkdir -p /bitnami/postgresql/data
            chmod 700 /bitnami/postgresql/data
            find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
              xargs chown -R 1001:1001
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      containers:
      - name: compass-postgresql
        image: docker.io/bitnami/postgresql:11.5.0-debian-9-r15
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
        securityContext:
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: PGDATA
          value: "/bitnami/postgresql/data"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: compass-postgresql
              key: postgresql-director-password
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              pg_isready -U "postgres" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: custom-init-scripts
          mountPath: /docker-entrypoint-initdb.d/
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      volumes:
      - name: custom-init-scripts
        configMap:
          name: compass-postgresql-db-init
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: compass/charts/connector/templates/certs-setup-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: connector-certs-setup-job
  namespace: default
  labels:
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  template:
    metadata:
      name: connector-certs-setup-job
      namespace: default
      annotations:
        sidecar.istio.io/inject: “false”
    spec:
      serviceAccountName: connector-certs-setup-job
      restartPolicy: OnFailure
      containers:
      - name: connector-certs-setup-job
        image: "eu.gcr.io/kyma-project/application-connectivity-certs-setup-job:0a651695"
        args:
          - "/appconnectivitycertssetupjob"
          - "--connectorCertificateSecret=compass-system/compass-connector-app-ca"
          - "--caCertificateSecret=istio-system/compass-gateway-mtls-certs-cacert"
          - "--caCertificate="
          - "--caKey="
          - "--generatedValidityTime=92d"
      securityContext:
            runAsUser: 2000
---
# Source: compass/templates/migrator-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: compass-migration
  labels:
    app: compass
    release: compass
spec:
  template:
    metadata:
      labels:
        app: compass
        release: compass
    spec:
        serviceAccountName: compass-migrator-job
        restartPolicy: Never
        shareProcessNamespace: true
        containers:
          
          - name: migrator
            image: eu.gcr.io/kyma-project/incubator/compass-schema-migrator:PR-2157
            imagePullPolicy: IfNotPresent
            env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            command:
              - "/bin/bash"
            args:
              - "-c"
              - "sleep 20; ./run.sh --up --component director --pv-path /compass-migrations; exit_code=$?; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
            volumeMounts:
              - name: migrations-storage
                mountPath: /compass-migrations
        volumes:
          - name: migrations-storage
            persistentVolumeClaim:
              claimName: compass-director-migrations
---
# Source: compass/charts/director/templates/external-certificate-rotation-job.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "director-external-certificate-rotation-job"
  namespace: default
spec:
  schedule: "*/1 * * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 5
  startingDeadlineSeconds: 60
  jobTemplate:
    metadata:
      labels:
        cronjob: external-certificate-rotation
    spec:
      template:
        metadata:
          labels:
            cronjob: external-certificate-rotation
        spec:
          
          serviceAccountName: director-external-certificate-rotation
          restartPolicy: Never
          containers:
            - name: certificate-rotation
              image: bitnami/kubectl:1.22.4
              imagePullPolicy: IfNotPresent
              command:
                - bash
                - -c
                - |
                  RED='\033[0;31m'
                  GREEN='\033[0;32m'
                  YELLOW='\033[0;33m'
                  NC='\033[0m' # No Color

                  set -e

                  IS_CERT_ISSUER_LOCALITY_VALID=false

                  trap "echo '# KILLING PILOT-AGENT #'; curl -X POST http://127.0.0.1:15020/quitquitquit; sleep 3;" RETURN EXIT INT TERM

                  function getClientCert() {
                    echo -e "${YELLOW}Getting the certificate chain... ${NC}"
                    CERT_CHAIN_PKCS7_RESP=$(curl -s -m 30 -X POST \
                      "$CERT_SVC_CSR_ENDPOINT$CERT_SVC_API_PATH" \
                      -H "Authorization: Bearer $TOKEN" \
                      -H 'Content-Type: application/json' \
                      -H 'Accept: application/json' \
                      -d "{
                            \"certificate-signing-request\": {
                                \"value\": $JSON_CSR,
                                \"type\": \"pkcs10-pem\",
                                \"validity\": {
                                  \"value\": $CERT_VALIDITY,
                                  \"type\": \"DAYS\"
                              }
                            }
                          }")

                    echo -e "${YELLOW}JSON-decoding client certificate chain... ${NC}"
                    CERT_CHAIN_PKCS7=$(jq -r '.["certificate-response"]["value"]' <<< "$CERT_CHAIN_PKCS7_RESP")

                    if [ "$CERT_CHAIN_PKCS7" == "null" ]
                    then
                      echo -e "${RED}Could not get certificate response. Reason: ${NC}"
                      echo "$CERT_CHAIN_PKCS7_RESP"
                      exit 1
                    fi

                    echo -e "${YELLOW}Extracting client certificate... ${NC}"
                    openssl pkcs7 -print_certs -out /tmp/client-certificate_pkcs7.pem <<< "$CERT_CHAIN_PKCS7"
                    openssl x509 -in /tmp/client-certificate_pkcs7.pem -out /tmp/client-certificate.pem
                  }

                  function confirmValidIssuerLocalityOrRetry() {
                    for (( i = 0; i < "$CLIENT_CERT_RETRY_ATTEMPTS"; i++ )); do
                      echo -e "${YELLOW}Checking issuer locality... ${NC}"
                      ISSUER_LOCALITY=$(openssl x509 -in /tmp/client-certificate.pem -noout -text | grep "Issuer:" | awk '{print $7}' | cut -d '=' -f2 | sed 's/,$//g')
                      if [[ "$ISSUER_LOCALITY" != "$EXPECTED_ISSUER_LOCALITY" ]]; then
                        echo -e "${RED}The issuer locality of the client certificate didn't match the expected one. We expect \"$EXPECTED_ISSUER_LOCALITY\" but have: \"$ISSUER_LOCALITY\" ${NC}"
                        echo -e "${YELLOW}[Retry $(($i+1))] Getting new client certificate... ${NC}"
                        getClientCert # This will override the client certificate file content with the newly issued certificate
                        sleep 0.2 # Sleep for 200ms before next retry
                      else
                        echo -e "${GREEN}Issuer locality of the client certificate is valid. Proceeding with the next steps... ${NC}"
                        IS_CERT_ISSUER_LOCALITY_VALID=true
                        break
                      fi
                    done

                    if [[ $IS_CERT_ISSUER_LOCALITY_VALID == false ]]; then
                      echo -e "${RED}Couldn't get the client certificate with valid issuer locality after $CLIENT_CERT_RETRY_ATTEMPTS attempts. Exiting... ${NC}"
                      exit 1
                    fi
                  }

                  echo -e "${YELLOW}Issuing token... ${NC}"
                  TOKEN=$(curl -s -m 30 -X POST \
                    "$CERT_SVC_OAUTH_URL$CERT_SVC_TOKEN_PATH" \
                    -H "Content-Type: application/x-www-form-urlencoded" \
                    -H "Accept: application/json" \
                    -d "grant_type=client_credentials&token_format=bearer&client_id=$CERT_SVC_CLIENT_ID&client_secret=$CERT_SVC_CLIENT_SECRET" \
                    | jq -r .access_token)

                  echo -e "${YELLOW}Generating an encrypted private key... ${NC}"
                  PASS_PHRASE=$(openssl rand -base64 32)
                  openssl genpkey -pass pass:"$PASS_PHRASE" -aes-256-cbc -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -out /tmp/encrypted-private-key.pem

                  echo -e "${YELLOW}Saving an unencrypted copy of the private key... ${NC}" # Later we use it to create a k8s secret, currently k8s does not support loading encrypted private keys
                  openssl rsa -in /tmp/encrypted-private-key.pem -out /tmp/unencrypted-private-key.pem -passin pass:"$PASS_PHRASE"

                  echo -e "${YELLOW}Creating a CSR in json... ${NC}"
                  openssl req -new -sha256 -key /tmp/encrypted-private-key.pem -passin pass:"$PASS_PHRASE" -out /tmp/my-csr.pem -subj "$CERT_SUBJECT_PATTERN"
                  JSON_CSR=$(jq -sR '.' /tmp/my-csr.pem)

                  getClientCert

                  confirmValidIssuerLocalityOrRetry

                  echo -e "${YELLOW}Creating/Updating client certificate secret... ${NC}"
                  kubectl create secret generic "$CLIENT_CERT_SECRET_NAME" --namespace=compass-system --from-literal="$CLIENT_CERT_CERT_KEY"="$(cat /tmp/client-certificate_pkcs7.pem)" --from-literal="$CLIENT_CERT_KEY_KEY"="$(cat /tmp/unencrypted-private-key.pem)" --save-config --dry-run=client -o yaml | kubectl apply -f -

                  set +e
              env:
                - name: CERT_SVC_CSR_ENDPOINT
                  valueFrom:
                    secretKeyRef:
                      name: cert-svc-secret
                      key: csr-endpoint
                - name: CERT_SVC_API_PATH
                  value: /cert
                - name: CERT_SUBJECT_PATTERN
                  value: /C=DE/O=SAP SE/OU=SAP Cloud Platform Clients/OU=Region/OU=123e4567-e89b-12d3-a456-426614174001/L=local/CN=compass
                - name: EXPECTED_ISSUER_LOCALITY
                  value: 
                - name: CERT_VALIDITY
                  value: "7"
                - name: CLIENT_CERT_RETRY_ATTEMPTS
                  value: "8"
                - name: CLIENT_CERT_SECRET_NAME
                  value: external-client-certificate
                - name: CLIENT_CERT_CERT_KEY
                  value:  tls.crt
                - name: CLIENT_CERT_KEY_KEY
                  value:  tls.key
                - name: CERT_SVC_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: cert-svc-secret
                      key: client-id
                - name: CERT_SVC_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: cert-svc-secret
                      key: client-secret
                - name: CERT_SVC_OAUTH_URL
                  valueFrom:
                    secretKeyRef:
                      name: cert-svc-secret
                      key: url
                - name: CERT_SVC_TOKEN_PATH
                  value: /secured/oauth/token
---
# Source: compass/charts/director/templates/tenant-loader-cronjob-external.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
    name: compass-director-tenant-loader-external
spec:
    suspend: true # This CronJob serves as a template for manually creating on-demand jobs
    schedule: "0 0 1 1 *"
    failedJobsHistoryLimit: 5
    concurrencyPolicy: Forbid
    startingDeadlineSeconds: 60 # Fix for https://github.com/kyma-incubator/compass/issues/1155
    jobTemplate:
        spec:
            template:
                metadata:
                    labels:
                        app: director-tenant-loader
                        release: compass
                spec:
                    serviceAccountName: compass-director
                    restartPolicy: Never
                    shareProcessNamespace: true
                    containers:
                        - name: loader
                          image: eu.gcr.io/kyma-project/incubator/compass-director:PR-2160
                          imagePullPolicy: IfNotPresent
                          env:
                              - name: APP_DB_USER
                                valueFrom:
                                    secretKeyRef:
                                        name: compass-postgresql
                                        key: postgresql-director-username
                              - name: APP_DB_PASSWORD
                                valueFrom:
                                    secretKeyRef:
                                        name: compass-postgresql
                                        key: postgresql-director-password
                              - name: APP_DB_HOST
                                valueFrom:
                                    secretKeyRef:
                                        name: compass-postgresql
                                        key: postgresql-serviceName
                              - name: APP_DB_PORT
                                valueFrom:
                                    secretKeyRef:
                                        name: compass-postgresql
                                        key: postgresql-servicePort
                              - name: APP_DB_NAME
                                valueFrom:
                                    secretKeyRef:
                                        name: compass-postgresql
                                        key: postgresql-director-db-name
                              - name: APP_DB_SSL
                                valueFrom:
                                    secretKeyRef:
                                        name: compass-postgresql
                                        key: postgresql-sslMode
                              - name: APP_DB_MAX_OPEN_CONNECTIONS
                                value: "1"
                              - name: APP_DB_MAX_IDLE_CONNECTIONS
                                value: "1"
                              - name: APP_LOG_FORMAT
                                value: "kibana"
                          volumeMounts:
                            - name: external-tenant-config
                              mountPath: /data/external-tenants.json
                              subPath: tenants.json
                          command:
                            - "/bin/sh"
                          args:
                            - "-c"
                            - "./tenantloader; exit_code=$?; sleep 5; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
                      
                    volumes:
                      - name: external-tenant-config
                        configMap:
                          name: compass-director-external-tenant-config
---
# Source: compass/templates/ord-aggregator-job.yaml
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: "compass-ord-aggregator"
spec:
  schedule: "*/1 * * * *"
  failedJobsHistoryLimit: 5
  concurrencyPolicy: Forbid
  startingDeadlineSeconds: 60 # Fix for https://github.com/kyma-incubator/compass/issues/1155
  jobTemplate:
    metadata:
      labels:
        cronjob: ord-aggregator
    spec:
      template:
        metadata:
          labels:
            cronjob: ord-aggregator
        spec:
          
          serviceAccountName: compass-ord-aggregator
          containers:
            - name: aggregator
              image: eu.gcr.io/kyma-project/incubator/compass-director:PR-2160
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - name: director-config
                  mountPath: /config
              env:
                - name: APP_DB_USER
                  valueFrom:
                    secretKeyRef:
                      name: compass-postgresql
                      key: postgresql-director-username
                - name: APP_DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: compass-postgresql
                      key: postgresql-director-password
                - name: APP_DB_HOST
                  valueFrom:
                    secretKeyRef:
                      name: compass-postgresql
                      key: postgresql-serviceName
                - name: APP_DB_PORT
                  valueFrom:
                    secretKeyRef:
                      name: compass-postgresql
                      key: postgresql-servicePort
                - name: APP_DB_NAME
                  valueFrom:
                    secretKeyRef:
                      name: compass-postgresql
                      key: postgresql-director-db-name
                - name: APP_DB_SSL
                  valueFrom:
                    secretKeyRef:
                      name: compass-postgresql
                      key: postgresql-sslMode
                - name: APP_CONFIGURATION_FILE
                  value: /config/config.yaml
                - name: APP_DB_MAX_OPEN_CONNECTIONS
                  value: "2"
                - name: APP_DB_MAX_IDLE_CONNECTIONS
                  value: "2"
                - name: APP_SKIP_SSL_VALIDATION
                  value: "false"
                - name: APP_LOG_FORMAT
                  value: "kibana"
                
                - name: APP_METRICS_PUSH_ENDPOINT
                  value: http://monitoring-prometheus-pushgateway.kyma-system.svc.cluster.local:9091
                
                - name: APP_EXTERNAL_CLIENT_CERT_SECRET
                  value: "compass-system/external-client-certificate"
                - name: APP_EXTERNAL_CLIENT_CERT_KEY
                  value: "tls.crt"
                - name: APP_EXTERNAL_CLIENT_KEY_KEY
                  value: "tls.key"
              command:
                - "/bin/sh"
              args:
                - "-c"
                - "./ordaggregator; exit_code=$?; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
            
          restartPolicy: Never
          shareProcessNamespace: true
          volumes:
            - name: director-config
              configMap:
                name: compass-director-config
---
# Source: compass/templates/internal-communication-policies.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: compass-internal-authz
  namespace: default
spec:
  action: ALLOW # allow only
  rules:
    - to: # non-sensitive paths
        - operation:
            methods:
              - GET
            paths:
              - /healthz*
        - operation:
            methods:
              - GET
            paths:
              - /readyz*
        - operation:
            methods:
              - GET
            paths:
              - /livez*
        - operation:
            methods:
              - GET
            paths:
              - /metrics*
        - operation:
            methods:
              - GET
            paths:
              - /open-resource-discovery-docs*
        - operation:
            methods:
              - GET
            paths:
              - /v1/info
    - to: # db communication
        - operation:
            ports:
              - "5432"
    - to: # frontend
        - operation:
            hosts:
              - compass.kyma.local-test
              - compass-mf.kyma.local-test
    - from: # or anything other only if the request is authenticated via RequestAuthentication
        - source:
            requestPrincipals: ["*"]
    - from: # or anything that's using the Prometheus service account
        - source:
            principals: ["cluster.local/ns/kyma-system/sa/monitoring-prometheus"]
---
# Source: compass/templates/internal-communication-policies.yaml
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: kyma-internal-authz
  namespace: kyma-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: hydra
  action: ALLOW # allow only
  rules:
    - to: # token endpoint
        - operation:
            hosts:
              - oauth2.kyma.local-test
              - oauth2.kyma.local-test:443
            paths:
              - /oauth2/token*
    - from: # or anything other only if the request is authenticated via RequestAuthentication
        - source:
            requestPrincipals: ['*']
---
# Source: compass/templates/compass-apps-microfrontend.yaml
apiVersion: "ui.kyma-project.io/v1alpha1"
kind: ClusterMicroFrontend
metadata:
  name: compass-apps
  labels:
    app: compass-apps
spec:
  displayName: Applications
  version: v1
  category: Experimental
  placement: cluster
  viewBaseUrl: "https://core-ui.kyma.local-test"
  navigationNodes:
    - label: Applications
      navigationPath: applications
      viewUrl: "/applications"
      order: 1
      viewGroup: "_core_ui_"
      keepSelectedForChildren: true
    - label: Application Details
      navigationPath: applications/details
      viewUrl: ''
      showInNavigation: false
    - label: Application Details
      navigationPath: applications/details/:appId
      viewUrl: '/application/:appId'
      showInNavigation: true

    - label: API Bundle Details
      navigationPath: applications/details/:appId/apiBundle
      viewUrl: ''
      showInNavigation: false
    - label: API Bundle Details
      navigationPath: applications/details/:appId/apiBundle/:apiBundleId
      viewUrl: '/application/:appId/apiBundle/:apiBundleId'
      showInNavigation: true

    - label: API Details
      navigationPath: applications/details/:appId/apiBundle/:apiBundleId/api
      viewUrl: ''
      showInNavigation: false
    - label: API Details
      navigationPath: applications/details/:appId/apiBundle/:apiBundleId/api/:apiId
      viewUrl: '/application/:appId/apiBundle/:apiBundleId/api/:apiId'
      showInNavigation: true
    - label: Edit API
      navigationPath: applications/details/:appId/apiBundle/:apiBundleId/api/:apiId/edit
      viewUrl: '/application/:appId/apiBundle/:apiBundleId/api/:apiId/edit'
      showInNavigation: true

    - label: Event Details
      navigationPath: applications/details/:appId/apiBundle/:apiBundleId/eventApi
      viewUrl: ''
      showInNavigation: false
    - label: Event Details
      navigationPath: applications/details/:appId/apiBundle/:apiBundleId/eventApi/:eventApiId
      viewUrl: '/application/:appId/apiBundle/:apiBundleId/eventApi/:eventApiId'
      showInNavigation: true
    - label: Edit Event
      navigationPath: applications/details/:appId/apiBundle/:apiBundleId/eventApi/:eventApiId/edit
      viewUrl: '/application/:appId/apiBundle/:apiBundleId/eventApi/:eventApiId/edit'
      showInNavigation: true
---
# Source: compass/charts/pairing-adapter/templates/destination-rule.yaml
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: compass-pairing-adapter
  namespace: default
  labels:
    release: compass
spec:
  host: compass-pairing-adapter.default.svc.cluster.local
  subsets:
    - name: "adapter-local-mtls-subset"
      labels:
        system: adapter-local-mtls
---
# Source: compass/templates/filters/disable-istio-retries-filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: compass-disable-retries-filter
  namespace: istio-system
spec:
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: ANY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                request_handle:headers():add("x-envoy-max-retries", "0")
              end
---
# Source: compass/templates/filters/oathkeeper-service-account-token-filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: compass-oathkeeper-sa-token
  namespace: kyma-system
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: oathkeeper
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_OUTBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              local function read_file(path)
                local file = io.open(path, "rb")
                if not file then return nil end
                local content = file:read "*a"
                file:close()
                return content
              end

              function envoy_on_request(request_handle)
                request_handle:logInfo("Add Service Account token filter")

                local token = read_file("/var/run/secrets/kubernetes.io/serviceaccount/token");

                if token~='' then
                  request_handle:headers():replace("X-Authorization", "Bearer "..token)
                else
                  request_handle:logError("Could not find SA token on the filesystem!")
                end
              end
---
# Source: compass/templates/filters/oathkeeper-timeout-filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: compass-oathkeeper-timeout
  namespace: kyma-system
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: oathkeeper
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                request_handle:headers():add("x-envoy-upstream-rq-timeout-ms", "120000")
              end
---
# Source: compass/templates/filters/preserve-external-host.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: compass-preserve-external-host
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: istio-ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                local host = request_handle:headers():get("Host")
                request_handle:headers():add("x-external-host", host)
              end
---
# Source: compass/templates/filters/rewrite-client-cert-filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: compass-oathkeeper-header-rewrite
  namespace: kyma-system
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: oathkeeper
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                local headers = request_handle:headers()
                local xForwardedClientCert = headers:get("X-Forwarded-Client-Cert")

                headers:add("Certificate-Data",xForwardedClientCert)
              end
---
# Source: compass/templates/filters/rewrite-correlation-headers-filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: compass-correlation-headers-rewrite
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      app: istio-ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function expectedCorrelationHeaders()
                local headers = {}
                headers['x-request-id']=true
                headers['x-correlation-id']=true
                headers['x-correlationid']=true
                headers['x-forrequest-id']=true
                headers['x-vcap-request-id']=true
                headers['x-broker-api-request-identity']=true
                
                return headers
              end
              function envoy_on_request(request_handle)
                local expectedHeaders = expectedCorrelationHeaders()
                local reqHeaders = request_handle:headers()
                local newRequestIDHeaderValue=''
                for key, value in pairs(reqHeaders) do
                  if (expectedHeaders[key] and newRequestIDHeaderValue=='')then -- empty value check is needed because we cannot break the loop: https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/lua_filter#pairs
                    newRequestIDHeaderValue = value
                  end
                end

                if newRequestIDHeaderValue~='' then
                  request_handle:headers():replace("x-request-id", newRequestIDHeaderValue)
                end
              end
---
# Source: compass/templates/filters/rewrite-token-filter.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: compass-oathkeeper-token-rewrite
  namespace: kyma-system
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: oathkeeper
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: SIDECAR_INBOUND
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            inlineCode: |
              function envoy_on_request(request_handle)
                function urldecode(s)
                  s = s:gsub('+', ' ')
                    :gsub('%%(%x%x)', function(h)
                                        return string.char(tonumber(h, 16))
                                      end)
                  return s
                end

                function parsequery(s)
                  local ans = {}
                  for k,v in s:gmatch('([^&?]-)=([^&?]+)' ) do
                    ans[ k ] = urldecode(v)
                  end
                  return ans
                end

                function startswith(str, start)
                  return str:sub(1, #start) == start
                end

                local headers = request_handle:headers()
                local path = headers:get(":path")

                if startswith(path, "/v1/applications/signingRequests/info") or startswith(path, "/v1/applications/certificates") then
                  local query_params = parsequery(path)
                  local token_param = query_params["token"]

                  if token_param ~= nil then
                    headers:add("Connector-Token", token_param)
                  end
                end
              end
---
# Source: compass/templates/limit-request-payload-size.yaml
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: compass-limit-request-payload-size
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          filterChain:
            filter:
              name: envoy.filters.network.http_connection_manager
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.buffer
          typed_config:
            '@type': type.googleapis.com/udpa.type.v1.TypedStruct
            value:
              maxRequestBytes: 2.097152e+06
---
# Source: compass/charts/gateway/templates/gateway.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: compass-gateway-mtls
  namespace: compass-system
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
    - port:
        number: 443
        name: https-mtls
        protocol: HTTPS
      tls:
        mode: MUTUAL
        credentialName: compass-gateway-mtls-certs
      hosts:
        - "compass-gateway-mtls.kyma.local-test"
        - "adapter-gateway-mtls.kyma.local-test"
---
# Source: compass/charts/gateway/templates/gateway.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: compass-gateway-external-mtls
  namespace: compass-system
spec:
  selector:
    istio: ingressgateway # use istio default ingress gateway
  servers:
    - port:
        number: 443
        name: https-mtls
        protocol: HTTPS
      tls:
        mode: MUTUAL
        credentialName: compass-gateway-mtls-certs
      hosts:
        - "compass-gateway-sap-mtls.kyma.local-test"
---
# Source: compass/templates/internal-communication-policies.yaml
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: compass-internal-authn
  namespace: default
spec:
  jwtRules:
    - issuer: kubernetes/serviceaccount
      jwksUri: https://kubernetes.default.svc.cluster.local/openid/v1/jwks
      forwardOriginalToken: true
      fromHeaders:
        - name: X-Authorization
          prefix: "Bearer "
---
# Source: compass/templates/internal-communication-policies.yaml
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: kyma-internal-authn
  namespace: kyma-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: hydra
  jwtRules:
    - issuer: kubernetes/serviceaccount
      jwksUri: https://kubernetes.default.svc.cluster.local/openid/v1/jwks
      forwardOriginalToken: true
      fromHeaders:
        - name: X-Authorization
          prefix: "Bearer "
---
# Source: compass/charts/connectivity-adapter/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-connectivity-adapter-one-time-tokens
  namespace: default
  labels:
    release: compass
    helm.sh/chart: connectivity-adapter-0.1.0
    app.kubernetes.io/name: connectivity-adapter
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  # Configuration of oathkeeper for secure endpoint of connectivity adapter for one time tokens
  upstream:
    url: "http://compass-connectivity-adapter.default.svc.cluster.local:8080"
  match:
    methods: ["GET", "POST", "PUT", "DELETE"]
    url: <http|https>://adapter-gateway.kyma.local-test/v1<(/.*)?>
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:8080/v1/tokens/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/connectivity-adapter/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-connectivity-adapter-certs
  labels:
    release: compass
    helm.sh/chart: connectivity-adapter-0.1.0
    app.kubernetes.io/name: connectivity-adapter
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  # Configuration of oathkeeper for secure endpoint of connectivity adapter for mtls
  upstream:
    url: "http://compass-connectivity-adapter.default.svc.cluster.local:8080"
  match:
    methods: ["GET", "POST", "PUT", "DELETE"]
    url: <http|https>://adapter-gateway-mtls.kyma.local-test/<(.*/)?>v1/<(.*)?>
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-oauth
spec:
  # Configuration of oathkeeper for secure endpoint of compass gateway
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
  match:
    methods: ["GET", "POST", "OPTIONS"]
    url: <http|https>://compass-gateway-auth-oauth.kyma.local-test<(:(80|443))?>/director/graphql
  authenticators:
  - handler: oauth2_introspection
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-ord-oauth
spec:
  # Configuration of oathkeeper for secure endpoint of compass open resource discovery service
  upstream:
    url: "http://compass-ord-service.compass-system.svc.cluster.local:3000"
  match:
    methods: ["GET"]
    url: <http|https>://compass-gateway.kyma.local-test<(:(80|443))?></open-resource-discovery-service/v0|/open-resource-discovery-static/v0>/<.*>
  authenticators:
    - handler: oauth2_introspection
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-jwt
spec:
  # Configuration of oathkeeper for secure endpoint of compass gateway
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
  match:
    methods: ["GET", "POST", "OPTIONS"]
    url: <http|https>://compass-gateway.kyma.local-test<(:(80|443))?>/director/graphql
  authenticators:
  - handler: jwt
    config:
      trusted_issuers: ["https://dex.kyma.local-test"]
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-jwt-runtime
spec:
  # Configuration of oathkeeper for secure endpoint of compass gateway for runtime access
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
    stripPath: "/runtime"
  match:
    methods: ["POST", "OPTIONS"]
    url: <http|https>://compass-gateway.kyma.local-test<(:(80|443))?>/runtime/director/graphql
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/runtime-mapping
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: director-operations-internal
spec:
  # Configuration of oathkeeper for secure endpoint of compass gateway for internal access
  upstream:
    url: "http://compass-director.default.svc.cluster.local:3002"
  match:
    methods: ["PUT"]
    url: <http|https>://compass-gateway-internal.kyma.local-test<(:(80|443))?>/operation
  authenticators:
    - handler: jwt
      config:
        jwks_urls: [https://kubernetes.default.svc.cluster.local/openid/v1/jwks]
  authorizer:
    handler: allow
  mutators:
    - handler: noop # This will copy all request headers to the oathkeeper's session, making them available in the claims template
    - handler: id_token
      config:
        claims: "{\"scopes\": \"application:read application:write application.webhooks:read application_template.webhooks:read webhooks.auth:read runtime:write runtime:read tenant:write\",\"tenant\":\"{ {{ if .Header.Tenant }} \\\"consumerTenant\\\":\\\"{{ print (index .Header.Tenant 0) }}\\\", {{ end }} \\\"externalTenant\\\":\\\"\\\"}\", \"consumerType\": \"Internal Component\", \"flow\": \"Internal\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-internal
spec:
  # Configuration of oathkeeper for secure endpoint internal communication with compass gateway
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
  match:
    methods: ["GET", "POST", "OPTIONS"]
    url: <http|https>://compass-gateway-internal.kyma.local-test<(:(80|443))?>/director/graphql
  authenticators:
    - handler: jwt
      config:
        jwks_urls: [https://kubernetes.default.svc.cluster.local/openid/v1/jwks]
  authorizer:
    handler: allow
  mutators:
    - handler: noop # This will copy all request headers to the oathkeeper's session, making them available in the claims template
    - handler: id_token
      config:
        claims: "{\"scopes\": \"application:read application:write application.webhooks:read application_template.webhooks:read webhooks.auth:read runtime:write runtime:read tenant:write\",\"tenant\":\"{ {{ if .Header.Tenant }} \\\"consumerTenant\\\":\\\"{{ print (index .Header.Tenant 0) }}\\\", {{ end }} \\\"externalTenant\\\":\\\"\\\"}\", \"consumerType\": \"Internal Component\", \"flow\": \"Internal\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-director-certs
spec:
  # Configuration of oathkeeper for secure endpoint of compass gateway
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
  match:
    methods: ["GET", "POST"]
    url: <http|https>://compass-gateway-mtls.kyma.local-test<(:(80|443))?>/director/graphql
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-system-broker-certs
spec:
  # Configuration of oathkeeper for secure endpoint of compass system broker
  upstream:
    url: "http://compass-system-broker.default.svc.cluster.local:5001"
  match:
    methods: ["GET", "POST", "PATCH", "PUT", "DELETE"]
    url: <http|https>://compass-gateway-mtls.kyma.local-test<(:(80|443))?>/broker<(/.*)?>
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-director-playground
spec:
  # Configuration of oathkeeper for unsecure endpoint of compass gateway - director playground
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
  match:
    methods: ["GET"]
    url: <http|https>://<compass-gateway-auth-oauth|compass-gateway|compass-gateway-mtls>.kyma.local-test<(:(80|443))?>/director/<(examples/.*)?>
  authenticators:
  - handler: anonymous
  authorizer:
    handler: allow
  mutators:
  - handler: noop
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-connector-one-time-tokens
  namespace: default
spec:
  # Configuration of oathkeeper for secure endpoint of compass gateway
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
  match:
    methods: ["GET", "POST"]
    url: <http|https>://compass-gateway.kyma.local-test<(:(80|443))?>/connector/graphql
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:8080/v1/tokens/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-connector-certs
  namespace: default
spec:
  # Configuration of oathkeeper for secure endpoint of compass gateway
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
  match:
    methods: ["GET", "POST"]
    url: <http|https>://compass-gateway-mtls.kyma.local-test<(:(80|443))?>/connector/graphql
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-ord-certs
spec:
  # Configuration of oathkeeper for endpoint secured by certificates of compass open resource discovery service
  upstream:
    url: "http://compass-ord-service.compass-system.svc.cluster.local:3000"
  match:
    methods: ["GET"]
    url: <http|https>://compass-gateway-mtls.kyma.local-test<(:(80|443))?>/open-resource-discovery-static/v0/<.*>
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-ord-external-certs
spec:
  # Configuration of oathkeeper for endpoint secured with certificates issued by external trusted root CA
  upstream:
    url: "http://compass-ord-service.compass-system.svc.cluster.local:3000"
  match:
    methods: ["GET"]
    url: <http|https>://compass-gateway-sap-mtls.kyma.local-test<(:(80|443))?></open-resource-discovery-service/v0|/open-resource-discovery-static/v0>/<.*>
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/authn-mapping/subscriber
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/gateway/templates/oathkeeper-rules.yaml
apiVersion: oathkeeper.ory.sh/v1alpha1
kind: Rule
metadata:
  name: compass-gateway-director-external-certs
spec:
  # Configuration of oathkeeper for endpoint secured with certificates issued by external trusted root CA
  upstream:
    url: "http://compass-gateway.default.svc.cluster.local:3000"
  match:
    methods: ["GET", "POST"]
    url: <http|https>://compass-gateway-sap-mtls.kyma.local-test<(:(80|443))?>/director/graphql
  authenticators:
  - handler: noop
  authorizer:
    handler: allow
  mutators:
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-connector.compass-system.svc.cluster.local:8080/v1/certificate/data/resolve
  - handler: hydrator
    config:
      api:
        retry:
          give_up_after: 6s
          max_delay: 2000ms
        url: http://compass-director.compass-system.svc.cluster.local:3000/tenant-mapping
  - handler: id_token
    config:
      claims: "{\"scopes\": \"{{ print .Extra.scope }}\",\"tenant\": \"{{ .Extra.tenant }}\", \"consumerID\": \"{{ print .Extra.consumerID}}\", \"consumerType\": \"{{ print .Extra.consumerType }}\", \"flow\": \"{{ print .Extra.flow }}\", \"onBehalfOf\": \"{{ print .Extra.onBehalfOf }}\", \"region\": \"{{ print .Extra.region }}\", \"tokenClientID\": \"{{ print .Extra.tokenClientID }}\"}"
---
# Source: compass/charts/director/templates/service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: compass-director
  labels:
    prometheus: monitoring
    app: director
    chart: "director-0.1.0"
    release: "compass"
    heritage: "Helm"
spec:
  endpoints:
    - port: metrics
      scheme: https
      tlsConfig:
        caFile: /etc/prometheus/secrets/istio.default/root-cert.pem
        certFile: /etc/prometheus/secrets/istio.default/cert-chain.pem
        keyFile: /etc/prometheus/secrets/istio.default/key.pem
        insecureSkipVerify: true
      metricRelabelings:
      - sourceLabels: [ __name__ ]
        regex: ^(go_gc_duration_seconds|go_goroutines|go_memstats_alloc_bytes|go_memstats_heap_alloc_bytes|go_memstats_heap_inuse_bytes|go_memstats_heap_sys_bytes|go_memstats_stack_inuse_bytes|go_threads|http_requests_total|process_cpu_seconds_total|process_max_fds|process_open_fds|process_resident_memory_bytes|process_start_time_seconds|process_virtual_memory_bytes|go_sql_stats_connections_in_use|go_sql_stats_connections_idle|go_sql_stats_connections_max_open|compass_director_graphql_request_total|compass_director_graphql_request_duration_seconds_bucket|compass_director_hydra_request_duration_seconds_bucket|compass_director_hydra_request_total|compass_director_total_requests_per_client)$
        action: keep
  namespaceSelector:
    matchNames:
      - "default"
  selector:
    matchLabels:
      app: director
---
# Source: compass/charts/gateway/templates/service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: compass-gateway
  labels:
    prometheus: monitoring
    app: gateway
    chart: "gateway-0.1.0"
    release: "compass"
    heritage: "Helm"
spec:
  endpoints:
    - port: metrics
      path: /metrics
      scheme: https
      tlsConfig:
        caFile: /etc/prometheus/secrets/istio.default/root-cert.pem
        certFile: /etc/prometheus/secrets/istio.default/cert-chain.pem
        keyFile: /etc/prometheus/secrets/istio.default/key.pem
        insecureSkipVerify: true
      metricRelabelings:
      - sourceLabels: [ __name__ ]
        regex: ^(go_gc_duration_seconds|go_goroutines|go_memstats_alloc_bytes|go_memstats_heap_alloc_bytes|go_memstats_heap_inuse_bytes|go_memstats_heap_sys_bytes|go_memstats_stack_inuse_bytes|go_threads|http_requests_total|process_cpu_seconds_total|process_max_fds|process_open_fds|process_resident_memory_bytes|process_start_time_seconds|process_virtual_memory_bytes|go_sql_stats_connections_in_use|go_sql_stats_connections_idle|go_sql_stats_connections_max_open|compass_gateway_auditlog_channel_length|compass_gateway_auditlog_request_duration_seconds_bucket|compass_gateway_auditlog_request_duration_seconds_count|compass_gateway_auditlog_request_duration_seconds_sum)$
        action: keep
  namespaceSelector:
    matchNames:
      - "default"
  selector:
    matchLabels:
      app: gateway
---
# Source: compass/charts/operations-controller/templates/service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: compass-operations-controller
  labels:
    prometheus: monitoring
    app: operations-controller
    chart: "operations-controller-0.1.0"
    release: "compass"
    heritage: "Helm"
spec:
  endpoints:
    - port: metrics
      scheme: https
      tlsConfig:
        caFile: /etc/prometheus/secrets/istio.default/root-cert.pem
        certFile: /etc/prometheus/secrets/istio.default/cert-chain.pem
        keyFile: /etc/prometheus/secrets/istio.default/key.pem
        insecureSkipVerify: true
  namespaceSelector:
    matchNames:
      - "default"
  selector:
    matchLabels:
      app: operations-controller
---
# Source: compass/charts/system-broker/templates/service-monitor.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: compass-system-broker
  labels:
    prometheus: monitoring
    app: system-broker
    chart: "system-broker-0.1.0"
    release: "compass"
    heritage: "Helm"
spec:
  endpoints:
    - port: metrics
      path: /metrics
      scheme: https
      tlsConfig:
        caFile: /etc/prometheus/secrets/istio.default/root-cert.pem
        certFile: /etc/prometheus/secrets/istio.default/cert-chain.pem
        keyFile: /etc/prometheus/secrets/istio.default/key.pem
        insecureSkipVerify: true
      metricRelabelings:
        - sourceLabels: [ __name__ ]
          regex: ^(go_gc_duration_seconds|go_goroutines|go_memstats_alloc_bytes|go_memstats_heap_alloc_bytes|go_memstats_heap_inuse_bytes|go_memstats_heap_sys_bytes|go_memstats_stack_inuse_bytes|go_threads|http_requests_total|process_cpu_seconds_total|process_max_fds|process_open_fds|process_resident_memory_bytes|process_start_time_seconds|process_virtual_memory_bytes|go_sql_stats_connections_in_use|go_sql_stats_connections_idle|go_sql_stats_connections_max_open|compass_system_broker_catalog_request_duration_seconds_bucket|compass_system_broker_catalog_request_duration_seconds_count|compass_system_broker_catalog_request_duration_seconds_sum|compass_system_broker_catalog_response_size_bucket|compass_system_broker_catalog_response_size_count|compass_system_broker_catalog_response_size_sum|compass_system_broker_catalog_request_total|compass_system_broker_provision_request_duration_seconds_bucket|compass_system_broker_provision_request_duration_seconds_count|compass_system_broker_provision_request_duration_seconds_sum|compass_system_broker_provision_response_size_bucket|compass_system_broker_provision_response_size_count|compass_system_broker_provision_response_size_sum|compass_system_broker_provision_request_total|compass_system_broker_deprovision_request_duration_seconds_bucket|compass_system_broker_deprovision_request_duration_seconds_count|compass_system_broker_deprovision_request_duration_seconds_sum|compass_system_broker_deprovision_response_size_bucket|compass_system_broker_deprovision_response_size_count|compass_system_broker_deprovision_response_size_sum|compass_system_broker_deprovision_request_total|compass_system_broker_bind_request_duration_seconds_bucket|compass_system_broker_bind_request_duration_seconds_count|compass_system_broker_bind_request_duration_seconds_sum|compass_system_broker_bind_response_size_bucket|compass_system_broker_bind_response_size_count|compass_system_broker_bind_response_size_sum|compass_system_broker_bind_request_total|compass_system_broker_unbind_request_duration_seconds_bucket|compass_system_broker_unbind_request_duration_seconds_count|compass_system_broker_unbind_request_duration_seconds_sum|compass_system_broker_unbind_response_size_bucket|compass_system_broker_unbind_response_size_count|compass_system_broker_unbind_response_size_sum|compass_system_broker_unbind_request_total)$
          action: keep
  namespaceSelector:
    matchNames:
      - "default"
  selector:
    matchLabels:
      app: system-broker
---
# Source: compass/templates/bench/director/director-bench.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-bench-director
  labels:
    benchmark: "true" # This is needed to differentiate benchmarks of regular tests
    app: compass-director-bench-app
    release: compass
    app.kubernetes.io/name: compass-director-bench
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-director-bench-app
    spec:
      
      nodeSelector:
        benchmark: "true" # This guarantees that benchmark tests will be executed on one and the same node. The gke-benchamrk job adds the benchmark=true label to the node with the lowest cpu load.
      containers:
        - name: director-bench # This should be unique across all benchmark containers.
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./director.bench -test.v -test.bench=. -test.benchtime 5s -test.count 5; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          restartPolicy: Never
          env:
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: DIRECTOR_HEALTHZ_URL
              value: "http://compass-director.compass-system.svc.cluster.local:3000/healthz"
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: DOMAIN
              value: "kyma.local-test"
            - name: APP_DEFAULT_SCENARIO
              value: "DEFAULT"
---
# Source: compass/templates/bench/ord-service/ord-service-bench.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-bench-ord-service
  labels:
    benchmark: "true" # This is needed to differentiate benchmarks of regular tests
    app: compass-ord-service-bench-app
    release: compass
    app.kubernetes.io/name: compass-ord-service-bench
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-ord-service-bench-app
    spec:
      
      nodeSelector:
        benchmark: "true" # This guarantees that benchmark tests will be executed on one and the same node. The gke-benchamrk job adds the benchmark=true label to the node with the lowest cpu load.
      containers:
        - name: ord-service-bench # This should be unique across all benchmark containers.
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./ord-service.bench -test.v -test.bench=. -test.benchtime 5s -test.count 5; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          restartPolicy: Never
          env:
            - name: ORD_SERVICE_URL
              value: "https://compass-gateway.kyma.local-test/open-resource-discovery-service/v0"
            - name: ORD_SERVICE_HEALTHZ_URL
              value: "http://compass-ord-service.compass-system.svc.cluster.local:3000/actuator/health"
            - name: ORD_SERVICE_DEFAULT_RESPONSE_TYPE
              value: xml
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: DOMAIN
              value: "kyma.local-test"
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
---
# Source: compass/templates/tests/connectivity-adapter/connectivity-adapter-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-connectivity-adapter
  labels:
    app: compass-connectivity-adapter-tests-app
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass-connectivity-adapter-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
  namespace: kyma-system
spec:
  disableConcurrency: false
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-connectivity-adapter-tests-app
    spec:
      
      serviceAccountName: compass-connectivity-adapter-tests
      containers:
        - name: connectivity-adapter-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "/connectivity-adapter.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          resources:
            limits:
              memory: "256Mi"
          env:
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: APP_SKIP_SSL_VERIFY
              value: "true"
            - name: APP_CONNECTIVITY_ADAPTER_URL
              value: "https://adapter-gateway.kyma.local-test"
            - name: APP_CONNECTIVITY_ADAPTER_MTLS_URL
              value: "https://adapter-gateway-mtls.kyma.local-test"
            - name: APP_TENANT
              value: "3e64ebae-38b5-46a0-b1ed-9ccee153a0ae"
            - name: DOMAIN
              value: "kyma.local-test"
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
    restartPolicy: Never
---
# Source: compass/templates/tests/connector/connector-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-connector
  labels:
    app: compass-connector-tests-app
    release: compass
    helm.sh/chart: compass-0.1.0
    app.kubernetes.io/name: compass-connector-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-connector-tests-app
    spec:
      serviceAccountName: compass-connector-tests
      containers:
      - name: connector-tests
        image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "./connector.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
        env:
          - name: APP_CONNECTOR_URL
            value: 'https://compass-gateway.kyma.local-test/connector/graphql'
          - name: APP_DIRECTOR_URL
            value: 'https://compass-gateway.kyma.local-test/director/graphql'
          - name: APP_DIRECTOR_MTLS_URL
            value: 'https://compass-gateway-mtls.kyma.local-test/director/graphql'
          - name: APP_CONNECTOR_HYDRATOR_URL
            value: 'http://compass-connector.compass-system.svc.cluster.local:8080'
          - name: APP_DIRECTOR_HYDRATOR_URL
            value: 'http://compass-director.compass-system.svc.cluster.local:8080'
          - name: APP_CERTIFICATE_DATA_HEADER
            value: Certificate-Data
          - name: APP_REVOCATION_CONFIG_MAP_NAMESPACE
            value: default
          - name: APP_REVOCATION_CONFIG_MAP_NAME
            value: "revocations-config"
          - name: APP_TENANT
            value: "3e64ebae-38b5-46a0-b1ed-9ccee153a0ae"
          - name: APP_APPS_FOR_RUNTIME_TENANT
            value: "2263cc13-5698-4a2d-9257-e8e76b543e33"
          - name: DOMAIN
            value: "kyma.local-test"
          - name: USER_EMAIL
            valueFrom:
              secretKeyRef:
                name: admin-user
                key: email
          - name: USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: admin-user
                key: password
          - name: APP_IS_WITH_TOKEN
            value: "false"
          - name: APP_ADDRESS
            value: "0.0.0.0:5000"
      restartPolicy: Never
---
# Source: compass/templates/tests/director/director-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-director
  labels:
    app: compass-director-tests-app
    release: compass
    app.kubernetes.io/name: compass-director-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-director-tests-app
    spec:
      
      serviceAccountName: compass-e2e-director
      containers:
        - name: director-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "/director.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          resources:
            limits:
              memory: "256Mi"
          env:
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: DOMAIN
              value: "kyma.local-test"
            - name: GATEWAY_OAUTH20_SUBDOMAIN
              value: "compass-gateway-auth-oauth"
            - name: GATEWAY_JWT_SUBDOMAIN
              value: "compass-gateway"
            - name: GATEWAY_CLIENT_CERTS_SUBDOMAIN
              value: "compass-gateway-mtls"
            - name: APP_GATEWAY_OAUTH
              value: "https://compass-gateway-auth-oauth.kyma.local-test/director/graphql"
            - name: APP_DIRECTOR_EXTERNAL_CERT_SECURED_URL
              value: "https://compass-gateway-sap-mtls.kyma.local-test/director/graphql"
            - name: APP_HEALTH_URL
              value: "https://director.kyma.local-test/healthz"
            - name: APP_WEBHOOK_URL
              value: "https://kyma-project.io"
            - name: APP_DEFAULT_SCENARIO_ENABLED
              value: "true"
            - name: APP_DEFAULT_SCENARIO
              value: "DEFAULT"
            - name: APP_DEFAULT_NORMALIZATION_PREFIX
              value: "mp-"
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
            - name: APP_INFO_API_ENDPOINT
              value: /v1/info
            - name: APP_INFO_CERT_SUBJECT
              value: "C=DE, O=SAP SE, OU=SAP Cloud Platform Clients, OU=Region, OU=123e4567-e89b-12d3-a456-426614174001, L=local, CN=compass"
            - name: APP_INFO_CERT_ISSUER
              value: C=DE, L=local, O=SAP SE, OU=SAP Cloud Platform Clients, CN=compass-ca
            - name: APP_CA_SECRET_NAME
              value: "compass-connector-app-ca"
            - name: APP_CA_SECRET_NAMESPACE
              value: "compass-system"
            - name: APP_EXTERNAL_CA_SECRET_NAME
              value: "external-client-certificate"
            - name: APP_EXTERNAL_CA_SECRET_NAMESPACE
              value: "compass-system"
            - name: APP_CA_SECRET_CERTIFICATE_KEY
              value: "ca.crt"
            - name: APP_CA_SECRET_KEY_KEY
              value: "ca.key"
            - name: APP_EXTERNAL_CA_SECRET_CERTIFICATE_KEY
              value: "tls.crt"
            - name: APP_EXTERNAL_CA_SECRET_KEY_KEY
              value: "tls.key"
            - name: SKIP_TESTS_REGEX
              value: 
          
        
      volumes:
      
      restartPolicy: Never
---
# Source: compass/templates/tests/gateway/gateway-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-gateway
  labels:
    app: compass-gateway-tests-app
    release: compass
    app.kubernetes.io/name: compass-gateway-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-gateway-tests-app
    spec:
      
      containers:
        - name: gateway-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./gateway.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          env:
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: DEFAULT_TEST_TENANT
              value: "5577cf46-4f78-45fa-b55f-a42a3bdba868"
            - name: DOMAIN
              value: "kyma.local-test"
            - name: GATEWAY_OAUTH20_SUBDOMAIN
              value: "compass-gateway-auth-oauth"
            - name: GATEWAY_JWT_SUBDOMAIN
              value: "compass-gateway"
            - name: GATEWAY_CLIENT_CERTS_SUBDOMAIN
              value: "compass-gateway-mtls"
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
      restartPolicy: Never
---
# Source: compass/templates/tests/istio/istio-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-istio
  labels:
    app: compass-istio-tests-app
    release: compass
    app.kubernetes.io/name: compass-istio-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-istio-tests-app
    spec:
      serviceAccountName: compass-compass
      
      containers:
        - name: istio-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./istio.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          env:
            - name: APP_COMPASS_GATEWAY_URL
              value: "https://compass-gateway.kyma.local-test"
            - name: APP_COMPASS_MTLS_GATEWAY_URL
              value: "https://compass-gateway-mtls.kyma.local-test"
            - name: APP_REQUEST_PAYLOAD_LIMIT
              value: "2097152"
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: DEFAULT_TENANT
              value: "3e64ebae-38b5-46a0-b1ed-9ccee153a0ae"
            - name: DOMAIN
              value: "kyma.local-test"
            - name: GATEWAY_OAUTH20_SUBDOMAIN
              value: "compass-gateway-auth-oauth"
            - name: GATEWAY_JWT_SUBDOMAIN
              value: "compass-gateway"
            - name: GATEWAY_CLIENT_CERTS_SUBDOMAIN
              value: "compass-gateway-mtls"
            - name: APP_GATEWAY_OAUTH
              value: "https://compass-gateway-auth-oauth.kyma.local-test/director/graphql"
            - name: APP_WEBHOOK_URL
              value: "https://kyma-project.io"
            - name: APP_DEFAULT_SCENARIO
              value: "DEFAULT"
            - name: APP_DEFAULT_NORMALIZATION_PREFIX
              value: "mp-"
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
        
      restartPolicy: Never
---
# Source: compass/templates/tests/ord-aggregator/ord-aggregator-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-ord-aggregator
  namespace: kyma-system
  labels:
    app: compass-ord-aggregator-tests-app
    release: compass
    app.kubernetes.io/name: compass-ord-aggregator-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-ord-aggregator-tests-app
    spec:
      
      containers:
        - name: ord-aggregator-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./ord-aggregator.test -test.v; exit_code=$?; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          env:
            - name: ORD_SERVICE_URL
              value: "https://compass-gateway.kyma.local-test/open-resource-discovery-service/v0"
            - name: ORD_SERVICE_HEALTHZ_URL
              value: "http://compass-ord-service.compass-system.svc.cluster.local:3000/actuator/health"
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: EXTERNAL_SERVICES_MOCK_BASE_URL
              value: "http://compass-external-services-mock.default.svc.cluster.local:8080"
            - name: EXTERNAL_SERVICES_MOCK_UNSECURED_URL
              value: "http://compass-external-services-mock.default.svc.cluster.local:8082/.well-known/open-resource-discovery"
            - name: EXTERNAL_SERVICES_MOCK_ABSOLUTE_URL
              value: "http://compass-external-services-mock.default.svc.cluster.local:8082/test/fullPath"
            - name: EXTERNAL_SERVICES_MOCK_CERT_SECURED_URL
              value: "https://compass-external-services-mock-sap-mtls.kyma.local-test/.well-known/open-resource-discovery"
            - name: EXTERNAL_SERVICES_MOCK_BASIC_URL
              value: "http://compass-external-services-mock.default.svc.cluster.local:8083/.well-known/open-resource-discovery"
            - name: EXTERNAL_SERVICES_MOCK_OAUTH_URL
              value: "http://compass-external-services-mock.default.svc.cluster.local:8084/.well-known/open-resource-discovery"
            - name: BASIC_USERNAME
              valueFrom:
                secretKeyRef:
                  name: test-credentials-secret
                  key: username
            - name: BASIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: test-credentials-secret
                  key: password
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: client-id
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: client-secret
            - name: ORD_SERVICE_DEFAULT_RESPONSE_TYPE
              value: xml
            - name: AGGREGATOR_SCHEDULE
              value: "*/1 * * * *"
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: DEFAULT_TEST_TENANT
              value: "5577cf46-4f78-45fa-b55f-a42a3bdba868"
            - name: DOMAIN
              value: "kyma.local-test"
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
      restartPolicy: Never
---
# Source: compass/templates/tests/ord-service/ord-service-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-ord-service
  labels:
    app: compass-ord-service-tests-app
    release: compass
    app.kubernetes.io/name: compass-ord-service-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-ord-service-tests-app
    spec:
      
      serviceAccountName: compass-e2e-ord-service
      containers:
        - name: ord-service-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./ord-service.test -test.v; exit_code=$?; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          env:
            - name: ORD_SERVICE_URL
              value: "https://compass-gateway.kyma.local-test/open-resource-discovery-service/v0"
            - name: ORD_EXTERNAL_CERT_SECURED_SERVICE_URL
              value: "https://compass-gateway-sap-mtls.kyma.local-test/open-resource-discovery-service/v0"
            - name: ORD_SERVICE_STATIC_PREFIX
              value: "/open-resource-discovery-static/v0"
            - name: ORD_SERVICE_HEALTHZ_URL
              value: "http://compass-ord-service.compass-system.svc.cluster.local:3000/actuator/health"
            - name: ORD_SERVICE_DEFAULT_RESPONSE_TYPE
              value: xml
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: DIRECTOR_EXTERNAL_CERT_SECURED_URL
              value: "https://compass-gateway-sap-mtls.kyma.local-test/director/graphql"
            - name: CA_SECRET_NAME
              value: "compass-connector-app-ca"
            - name: CA_SECRET_NAMESPACE
              value: "compass-system"
            - name: CA_SECRET_CERTIFICATE_KEY
              value: "ca.crt"
            - name: CA_SECRET_KEY_KEY
              value: "ca.key"
            - name: EXTERNAL_SERVICES_MOCK_URL
              value: http://compass-external-services-mock.compass-system.svc.cluster.local:8080
            - name: CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: client-id
            - name: CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: client-secret
            - name: SUBSCRIPTION_PROVIDER_LABEL_KEY
              value: subscriptionProviderId
            - name: CONSUMER_SUBACCOUNT_IDS_LABEL_KEY
              value: consumer_subaccount_ids
            - name: TENANT_CONFIG_TENANT_ID_PROPERTY
              value: tenantId
            - name: TENANT_CONFIG_SUBACCOUNT_TENANT_ID_PROPERTY
              value: subaccountTenantId
            - name: TENANT_CONFIG_CUSTOMER_ID_PROPERTY
              value: customerId
            - name: TENANT_CONFIG_SUBDOMAIN_PROPERTY
              value: subdomain
            - name: TENANT_CONFIG_SUBSCRIPTION_PROVIDER_ID_PROPERTY
              value: subscriptionProviderId
            - name: TENANT_CONFIG_TENANT_FETCHER_URL
              value: "https://compass-gateway.kyma.local-test"
            - name: TENANT_CONFIG_ROOT_API
              value: "/tenants"
            - name: TENANT_CONFIG_REGIONAL_HANDLER_ENDPOINT
              value: "/v1/regional/{region}/callback/{tenantId}"
            - name: TENANT_CONFIG_TENANT_PATH_PARAM
              value: "tenantId"
            - name: TENANT_CONFIG_REGION_PATH_PARAM
              value: "region"
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: APP_DEFAULT_SCENARIO_ENABLED
              value: "true"
            - name: DOMAIN
              value: "kyma.local-test"
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
            - name: SKIP_TESTS_REGEX
              value: 
            - name: APP_SELF_REGISTER_DISTINGUISH_LABEL_KEY
              value: distinguishingLabel
            - name: APP_SELF_REGISTER_LABEL_KEY
              value: selfRegLabel
        
      restartPolicy: Never
---
# Source: compass/templates/tests/pairing-adapter/pairing-adapter-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-pairing-adapter
  labels:
    app: compass-pairing-adapter-tests-app
    release: compass
    app.kubernetes.io/name: compass-pairing-adapter-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-pairing-adapter-tests-app
    spec:
      containers:
        - name: pairing-adapter-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./pairing-adapter.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          env:

            - name: APP_MTLS_PAIRING_ADAPTER_URL
              value: "http://compass-pairing-adapter.default.svc.cluster.local/adapter-local-mtls"
            - name: APP_TEST_TENANT
              value: "test-tenant"
            - name: APP_TEST_CLIENT_USER
              value: "test-user"
            - name: APP_TEST_APPLICATION_ID
              value: "123-test-456"
            - name: APP_TEST_APPLICATION_NAME
              value: "test-app"

restartPolicy: Never
---
# Source: compass/templates/tests/system-broker/system-broker-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-system-broker
  labels:
    app: compass-system-broker-tests-app
    release: compass
    app.kubernetes.io/name: compass-system-broker-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-system-broker-tests-app
    spec:
      
      containers:
        - name: system-broker-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./system-broker.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          env:
            - name: DOMAIN
              value: "kyma.local-test"
            - name: APP_TENANT
              value: "3e64ebae-38b5-46a0-b1ed-9ccee153a0ae"
            - name: APP_SYSTEM_BROKER_URL
              value: "https://compass-gateway-mtls.kyma.local-test/broker"
            - name: APP_DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director/graphql"
            - name: APP_CONNECTOR_URL
              value: "https://compass-gateway.kyma.local-test/connector/graphql"
            - name: APP_ORD_SERVICE_URL
              value: "https://compass-gateway-mtls.kyma.local-test/open-resource-discovery-static/v0"
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
      restartPolicy: Never
---
# Source: compass/templates/tests/system-fetcher/system-fetcher-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-system-fetcher
  labels:
    app: compass-system-fetcher-tests-app
    release: compass
    app.kubernetes.io/name: compass-system-fetcher-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
    disable-db-dump: "true"
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-system-fetcher-tests-app
    spec:
      
      serviceAccountName: compass-e2e-system-fetcher
      containers:
        - name: system-fetcher-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./system-fetcher.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          env:
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: DOMAIN
              value: "kyma.local-test"
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: DIRECTOR_HEALTHZ_URL
              value: "http://compass-director.compass-system.svc.cluster.local:3000/healthz"
            - name: EXTERNAL_SERVICES_MOCK_BASE_URL
              value: "http://compass-external-services-mock.compass-system.svc.cluster.local:8080"
            - name: SYSTEM_FETCHER_PAGE_SIZE
              value: "200"
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
        
      restartPolicy: Never
---
# Source: compass/templates/tests/tenant-fetcher-job/tenant-fetcher-job-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-tenant-fetcher-job
  labels:
    app: compass-tenant-fetcher-job-tests-app
    release: compass
    app.kubernetes.io/name: compass-tenant-fetcher-job-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
    disable-db-dump: "false"
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-tenant-fetcher-job-tests-app
    spec:
      
      serviceAccountName: compass-e2e-tenant-fetcher
      containers:
        - name: tenant-fetcher-job-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./tenant-fetcher-job.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          env:
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
            - name: DOMAIN
              value: "kyma.local-test"
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: INTERNAL_DIRECTOR_URL
              value: "https://compass-gateway-internal.kyma.local-test/director/graphql"
            - name: EXTERNAL_SERVICES_MOCK_BASE_URL
              value: "http://compass-external-services-mock.compass-system.svc.cluster.local:8080"
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
        
      restartPolicy: Never
---
# Source: compass/templates/tests/tenant-fetcher/tenant-fetcher-test.yaml
apiVersion: "testing.kyma-project.io/v1alpha1"
kind: TestDefinition
metadata:
  name: compass-e2e-tenant-fetcher
  labels:
    app: compass-tenant-fetcher-tests-app
    release: compass
    app.kubernetes.io/name: compass-tenant-fetcher-tests
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
    helm.sh/chart: compass-0.1.0
  namespace: kyma-system
spec:
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true"
      labels:
        app: compass-tenant-fetcher-tests-app
    spec:
      
      containers:
        - name: tenant-fetcher-tests
          image: eu.gcr.io/kyma-project/incubator/compass-tests:PR-2160
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args: ["-c", "./tenant-fetcher.test -test.v; exit_code=$?; echo code is $exit_code; echo 'killing pilot-agent...'; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 4; exit $exit_code;"]
          resources:
            limits:
              memory: "1Gi"
          env:
            - name: APP_TENANT_PROVIDER_TENANT_ID_PROPERTY
              value: tenantId
            - name: APP_TENANT_PROVIDER_CUSTOMER_ID_PROPERTY
              value: customerId
            - name: APP_TENANT_PROVIDER_SUBACCOUNT_TENANT_ID_PROPERTY
              value: subaccountTenantId
            - name: APP_TENANT_PROVIDER_SUBDOMAIN_PROPERTY
              value: subdomain
            - name: APP_TENANT_PROVIDER_SUBSCRIPTION_PROVIDER_ID_PROPERTY
              value: subscriptionProviderId
            - name: APP_SUBSCRIPTION_PROVIDER_LABEL_KEY
              value: subscriptionProviderId
            - name: APP_CONSUMER_SUBACCOUNT_IDS_LABEL_KEY
              value: consumer_subaccount_ids
            - name: APP_TENANT
              value: 3e64ebae-38b5-46a0-b1ed-9ccee153a0ae
            - name: APP_TENANT_FETCHER_URL
              value: "https://compass-gateway.kyma.local-test"
            - name: APP_EXTERNAL_SERVICES_MOCK_URL
              value: http://compass-external-services-mock.compass-system.svc.cluster.local:8080
            - name: APP_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: client-id
            - name: APP_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: compass-external-services-mock-oauth-credentials
                  key: client-secret
            - name: APP_TENANT_FETCHER_HEALTHZ_URL
              value: "http://compass-tenant-fetcher.compass-system.svc.cluster.local:3000/tenants/healthz"
            - name: APP_ROOT_API
              value: "/tenants"
            - name: APP_HANDLER_ENDPOINT
              value: "/v1/callback/{tenantId}"
            - name: APP_REGIONAL_HANDLER_ENDPOINT
              value: "/v1/regional/{region}/callback/{tenantId}"
            - name: APP_DEPENDENCIES_ENDPOINT
              value: "/v1/dependencies"
            - name: APP_TENANT_PATH_PARAM
              value: "tenantId"
            - name: APP_REGION_PATH_PARAM
              value: "region"
            - name: DIRECTOR_URL
              value: "https://compass-gateway.kyma.local-test/director"
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  key: postgresql-director-username
                  name: compass-postgresql
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresql-director-password
                  name: compass-postgresql
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  key: postgresql-serviceName
                  name: compass-postgresql
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  key: postgresql-servicePort
                  name: compass-postgresql
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  key: postgresql-director-db-name
                  name: compass-postgresql
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  key: postgresql-sslMode
                  name: compass-postgresql
            - name: APP_DB_MAX_OPEN_CONNECTIONS
              value: "3"
            - name: APP_DB_MAX_IDLE_CONNECTIONS
              value: "1"
            - name: APP_SUBSCRIPTION_CALLBACK_SCOPE
              value: "Callback"
            - name: DOMAIN
              value: "kyma.local-test"
            - name: APP_IS_WITH_TOKEN
              value: "false"
            - name: APP_ADDRESS
              value: "0.0.0.0:5000"
            - name: USER_EMAIL
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: email
            - name: USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: admin-user
                  key: password
      restartPolicy: Never
---
# Source: compass/charts/cockpit/templates/mf-virtualservice.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-cockpit-mf
  labels:
    app: cockpit
    chart: cockpit-0.1.0
    heritage: Helm
    release: compass
spec:
  hosts:
    - compass-mf.kyma.local-test
  gateways:
    - kyma-system/kyma-gateway
  http:
    - match:
        - uri:
            regex: /.*
      route:
        - destination:
            port:
              number: 8888
            host: compass-cockpit
---
# Source: compass/charts/cockpit/templates/virtualservice.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-cockpit
  labels:
    app: cockpit
    chart: cockpit-0.1.0
    heritage: Helm
    release: compass
spec:
  hosts:
    - compass.kyma.local-test
  gateways:
    - kyma-system/kyma-gateway
  http:
    - match:
        - uri:
            regex: /.*
      route:
        - destination:
            port:
              number: 81
            host: compass-cockpit
---
# Source: compass/charts/connectivity-adapter/templates/virtualservice-mtls.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-connectivity-adapter-mtls
  namespace: default
  labels:
    app: connectivity-adapter
    release: compass
    helm.sh/chart: connectivity-adapter-0.1.0
    app.kubernetes.io/name: connectivity-adapter
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  hosts:
    - 'adapter-gateway-mtls.kyma.local-test'
  gateways:
    - compass-system/compass-gateway-mtls
  http:
    - match:
        - uri:
            regex: /.*
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      route:
        - destination:
            host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
            port:
              number: 4455
---
# Source: compass/charts/connectivity-adapter/templates/virtualservice.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-connectivity-adapter
  namespace: default
  labels:
    app: connectivity-adapter
    release: compass
    helm.sh/chart: connectivity-adapter-0.1.0
    app.kubernetes.io/name: connectivity-adapter
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  hosts:
    - 'adapter-gateway.kyma.local-test'
  gateways:
    - kyma-system/kyma-gateway
  http:
    - match:
      - uri:
          regex: /.*
      route:
        - destination:
            host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
            port:
              number: 4455
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      corsPolicy:
        allowOrigins:
          - regex: ".*"
        allowHeaders:
          - "authorization"
          - "content-type"
          - "tenant"
        allowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
---
# Source: compass/charts/connector/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-connector
  namespace: default
  labels:
    release: compass
    helm.sh/chart: connector-0.1.0
    app.kubernetes.io/name: connector
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  hosts:
    - connector.kyma.local-test
  gateways:
    - kyma-system/kyma-gateway
  http:
      - match:
        - uri:
            exact: /healthz
        route:
          - destination:
              port:
                number: 3000
              host: compass-connector
---
# Source: compass/charts/director/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-director
  namespace: default
  labels:
    release: compass
    helm.sh/chart: director-0.1.0
    app.kubernetes.io/name: director
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: compass
spec:
  hosts:
    - director.kyma.local-test
  gateways:
    - kyma-system/kyma-gateway
  http:
    - match:
        - uri:
            exact: /healthz
      route:
        - destination:
            port:
              number: 3000
            host: compass-director
---
# Source: compass/charts/gateway/templates/virtualservice-external-mtls.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-gateway-external-mtls
  namespace: default
  labels:
    app: gateway
    chart: gateway-0.1.0
    heritage: Helm
    release: compass
spec:
  hosts:
    - 'compass-gateway-sap-mtls.kyma.local-test'
  gateways:
    - compass-system/compass-gateway-external-mtls
  http:
    - match:
      - uri:
          exact: /open-resource-discovery-static/v0
      redirect:
        uri: /open-resource-discovery-static/v0/
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
    - match:
      - uri:
          exact: /open-resource-discovery-service/v0
      redirect:
        uri: /open-resource-discovery-service/v0/
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
    - match:
      - uri:
          exact: /director
      redirect:
        uri: /director/
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      corsPolicy:
        allowOrigins:
          - regex: ".*"
        allowHeaders:
          - "authorization"
          - "content-type"
          - "tenant"
        allowMethods:
          - "GET"
    - match:
        - uri:
            regex: /.*
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      route:
        - destination:
            host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
            port:
              number: 4455
---
# Source: compass/charts/gateway/templates/virtualservice-internal.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-gateway-internal
  namespace: default
  labels:
    app: gateway
    chart: gateway-0.1.0
    heritage: Helm
    release: compass
spec:
  hosts:
    - 'compass-gateway-internal.kyma.local-test'
  gateways:
    - kyma-system/kyma-gateway
  http:
    - match:
        - uri:
            exact: /director
      redirect:
        uri: /director/
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      corsPolicy:
        allowOrigins:
          - regex: ".*"
        allowHeaders:
          - "authorization"
          - "content-type"
          - "tenant"
        allowMethods:
          - "GET"
    - match:
        - uri:
            regex: /.*
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      route:
        - destination:
            host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
            port:
              number: 4455
---
# Source: compass/charts/gateway/templates/virtualservice-mtls.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-gateway-mtls
  namespace: default
  labels:
    app: gateway
    chart: gateway-0.1.0
    heritage: Helm
    release: compass
spec:
  hosts:
    - 'compass-gateway-mtls.kyma.local-test'
  gateways:
    - compass-system/compass-gateway-mtls
  http:
    - match:
      - uri:
          exact: /broker
      redirect:
        uri: /broker/
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
    - match:
      - uri:
          exact: /open-resource-discovery-static/v0
      redirect:
        uri: /open-resource-discovery-static/v0/
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
    - match:
      - uri:
          exact: /director
      redirect:
        uri: /director/
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      corsPolicy:
        allowOrigins:
          - regex: ".*"
        allowHeaders:
          - "authorization"
          - "content-type"
          - "tenant"
        allowMethods:
          - "GET"
    - match:
        - uri:
            regex: /.*
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      route:
        - destination:
            host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
            port:
              number: 4455
---
# Source: compass/charts/gateway/templates/virtualservice-secure.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-gateway-secure
  namespace: default
  labels:
    app: gateway
    chart: gateway-0.1.0
    heritage: Helm
    release: compass
spec:
  hosts:
  - 'compass-gateway-auth-oauth.kyma.local-test'
  gateways:
  - kyma-system/kyma-gateway
  http:
  - match:
    - uri:
        exact: /director
    redirect:
      uri: /director/
    headers:
      request:
        remove:
          - Client-Id-From-Token
          - Client-Id-From-Certificate
          - Client-Certificate-Hash
          - Certificate-Data
    corsPolicy:
      allowOrigins:
        - regex: ".*"
      allowHeaders:
        - "authorization"
        - "content-type"
        - "tenant"
        - suggest_token
      allowMethods:
        - "GET"
  - match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
        port:
          number: 4455
    corsPolicy:
      allowOrigins:
      - regex: ".*"
      allowHeaders:
      - "authorization"
      - "content-type"
      - "tenant"
      - suggest_token
      - client_user
      allowMethods:
      - "GET"
      - "POST"
      - "PUT"
      - "DELETE"
---
# Source: compass/charts/gateway/templates/virtualservice.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-gateway
  namespace: default
  labels:
    app: gateway
    chart: gateway-0.1.0
    heritage: Helm
    release: compass
spec:
  hosts:
    - 'compass-gateway.kyma.local-test'
  gateways:
    - kyma-system/kyma-gateway
  http:
    - match:
      - uri:
          prefix: /connector
      route:
      - destination:
          host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
          port:
            number: 4455
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
    - match:
      - uri:
          prefix: /tenants
      route:
        - destination:
            host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
            port:
              number: 4455
    - match:
      - uri:
          prefix:  /open-resource-discovery-docs
      route:
      - destination:
          host: compass-ord-service.compass-system.svc.cluster.local
          port:
            number: 3000
    - match:
      - uri:
          prefix: /open-resource-discovery-service/v0
      - uri:
          prefix: /open-resource-discovery-static/v0
      route:
        - destination:
            host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
            port:
              number: 4455
    - match:
      - uri:
         prefix: /v1/info
      route:
        - destination:
            host: compass-director.compass-system.svc.cluster.local
            port:
              number: 3000
    - match:
      - uri:
          exact: /director
      redirect:
        uri: /director/
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      corsPolicy:
        allowOrigins:
          - regex: ".*"
        allowHeaders:
          - "authorization"
          - "content-type"
          - "tenant"
          - client_user
        allowMethods:
          - "GET"
    - match:
      - uri:
          regex: /.*
      route:
        - destination:
            host: ory-oathkeeper-proxy.kyma-system.svc.cluster.local
            port:
              number: 4455
      headers:
        request:
          remove:
            - Client-Id-From-Token
            - Client-Id-From-Certificate
            - Client-Certificate-Hash
            - Certificate-Data
      corsPolicy:
        allowOrigins:
          - regex: ".*"
        allowHeaders:
          - "authorization"
          - "content-type"
          - "tenant"
          - client_user
        allowMethods:
          - "GET"
          - "POST"
          - "PUT"
          - "DELETE"
---
# Source: compass/charts/pairing-adapter/templates/virtual-service.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: compass-pairing-adapter
  namespace: default
  labels:
    release: compass
spec:
  hosts:
    - compass-pairing-adapter.default.svc.cluster.local
  http:
    - name: "adapter-local-mtls-route"
      match:
        - uri:
            prefix: "/adapter-local-mtls"
      rewrite:
        uri: "/adapter"
      route:
        - destination:
            host: compass-pairing-adapter.default.svc.cluster.local
            subset: "adapter-local-mtls-subset"
---
# Source: compass/templates/tests/connector/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-connector-ts
  namespace: kyma-system
  labels:
    app: compass-connector-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-connector-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-connector-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/tests/director/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-director-ts
  namespace: kyma-system
  labels:
    app: compass-director-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-director-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-director-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/tests/external-services-mock/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-external-services-mock-ts
  namespace: kyma-system
  labels:
    app: compass-external-services-mock-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-external-services-mock-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-external-services-mock-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/tests/gateway/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-gateway-ts
  namespace: kyma-system
  labels:
    app: compass-gateway-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-gateway-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-gateway-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/tests/istio/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-istio-ts
  namespace: kyma-system
  labels:
    app: compass-istio-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-istio-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-istio-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/tests/ord-aggregator/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-ord-aggregator-ts
  namespace: kyma-system
  labels:
    app: compass-ord-aggregator-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-ord-aggregator-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-ord-aggregator-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/tests/ord-service/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-ord-service-ts
  namespace: kyma-system
  labels:
    app: compass-ord-service-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-ord-service-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-ord-service-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/tests/pairing-adapter/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-pairing-adapter-ts
  namespace: kyma-system
  labels:
    app: compass-pairing-adapter-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-pairing-adapter-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-pairing-adapter-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/tests/system-broker/virtualservice.yaml
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: compass-e2e-system-broker-ts
  namespace: kyma-system
  labels:
    app: compass-system-broker-tests-app
spec:
  gateways:
  - kyma-system/kyma-gateway
  hosts:
  - 'compass-system-broker-ts.kyma.local-test'
  http:
  - corsPolicy:
      allowOrigins:
      - regex: .*
    match:
    - uri:
        regex: /.*
    route:
    - destination:
        host: compass-e2e-system-broker-ts.kyma-system.svc.cluster.local
        port:
          number: 5000
---
# Source: compass/templates/update-expected-schema-version-job.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
   "helm.sh/hook": pre-install,pre-rollback,pre-upgrade
   "helm.sh/hook-weight": "-5"
   "helm.sh/hook-delete-policy": before-hook-creation
  name: update-expected-schema-version
  namespace: default
---
# Source: compass/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: compass-postgresql
  namespace: default
  labels:
    app: postgresql
    chart: postgresql-5.3.11
    release: "compass"
    heritage: "Helm"
  annotations:
    "helm.sh/hook": "pre-install" # Modified
    "helm.sh/hook-delete-policy": "before-hook-creation" # Modified
type: Opaque
data:
  postgresql-director-db-name: "cG9zdGdyZXM=" # Modified
  postgresql-director-username: "cG9zdGdyZXM=" # Modified
  postgresql-director-password: "SUJTSUtjQmdwOQ=="
  postgresql-serviceName: "Y29tcGFzcy1wb3N0Z3Jlc3Fs" # Modified
  postgresql-servicePort: "NTQzMg==" # Modified
  postgresql-sslMode: "ZGlzYWJsZQ==" # Modified
  postgresql-username: "cG9zdGdyZXM=" #TODO remove after migration to separate user will be done
  postgresql-password: "WmU4bTF1WGNqRg==" #TODO remove after migration to separate user will be done
  postgresql-directorDatabaseName: "cG9zdGdyZXM=" #TODO remove after migration to separate user will be done
---
# Source: compass/charts/postgresql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: compass-postgresql
  namespace: kyma-system
  labels:
    app: postgresql
    chart: postgresql-5.3.11
    release: "compass"
    heritage: "Helm"
  annotations:
    "helm.sh/hook": "pre-install" # Modified
    "helm.sh/hook-delete-policy": "before-hook-creation" # Modified
type: Opaque
data:
  postgresql-director-db-name: "cG9zdGdyZXM=" # Modified
  postgresql-director-username: "cG9zdGdyZXM=" # Modified
  postgresql-director-password: "SUJTSUtjQmdwOQ=="
  postgresql-serviceName: "Y29tcGFzcy1wb3N0Z3Jlc3FsLmNvbXBhc3Mtc3lzdGVtLnN2Yy5jbHVzdGVyLmxvY2Fs" # Modified
  postgresql-servicePort: "NTQzMg==" # Modified
  postgresql-sslMode: "ZGlzYWJsZQ==" # Modified
  postgresql-username: "cG9zdGdyZXM=" #TODO remove after migration to separate user will be done
  postgresql-password: "TFlpR2M1REJ2eA==" #TODO remove after migration to separate user will be done
  postgresql-directorDatabaseName: "cG9zdGdyZXM=" #TODO remove after migration to separate user will be done
---
# Source: compass/templates/expected-schema-version-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
  name: expected-schema-version
  namespace: default
  labels:
    app: compass
    release: compass
data:
  schemaVersion: " "
---
# Source: compass/templates/update-expected-schema-version-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    "helm.sh/hook": pre-install,pre-rollback,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
  name: update-expected-schema-version
  namespace: default
rules:
  - apiGroups: ["*"]
    resources: ["configmaps"]
    verbs: ["create", "get", "patch"]
---
# Source: compass/templates/update-expected-schema-version-job.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    "helm.sh/hook": pre-install,pre-rollback,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
  name: update-expected-schema-version
  namespace: default
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: update-expected-schema-version
subjects:
  - kind: ServiceAccount
    name: update-expected-schema-version
    namespace: default
---
# Source: compass/charts/director/templates/oauth-clients-scopes-sync-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: compass-director-clients-scopes-synchronization
  namespace: default
  labels:
    app: compass-director-clients-scopes-synchronization
    release: compass
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
    configChecksum: "3bd896857745ce81ba3115b74d0815bb8b27722f1f2811d0300ce49ddb9b5882"
spec:
  template:
    metadata:
      labels:
        app: compass-director-clients-scopes-synchronization
        release: compass
    spec:
      serviceAccountName: compass-director
      restartPolicy: Never
      shareProcessNamespace: true
      containers:
        - name: sync
          image: eu.gcr.io/kyma-project/incubator/compass-director:PR-2160
          imagePullPolicy: IfNotPresent
          env:
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: APP_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: APP_DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: APP_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: APP_DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
            - name: APP_DB_MAX_OPEN_CONNECTIONS
              value: "1"
            - name: APP_DB_MAX_IDLE_CONNECTIONS
              value: "1"
            - name: APP_CONFIGURATION_FILE
              value: /config/config.yaml
            - name: APP_OAUTH20_URL
              value: http://ory-hydra-admin.kyma-system.svc.cluster.local:4445
            - name: APP_OAUTH20_PUBLIC_ACCESS_TOKEN_ENDPOINT
              value: "https://oauth2.kyma.local-test/oauth2/token"
          command:
            - "/bin/sh"
          args:
            - "-c"
            - "./scopessynchronizer; exit_code=$?; sleep 5; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
          volumeMounts:
          - name: director-config
            mountPath: /config
      volumes:
      - name: director-config
        configMap:
          name: compass-director-config
---
# Source: compass/charts/director/templates/tenant-loader-job-default.yaml
apiVersion: batch/v1
kind: Job
metadata:
    name: compass-director-tenant-loader-default
    labels:
        app: director-tenant-loader
        release: compass
    annotations:
        "helm.sh/hook": post-install
        "helm.sh/hook-weight": "1"
        "helm.sh/hook-delete-policy": before-hook-creation
spec:
    template:
        metadata:
            labels:
                app: director
                release: compass
        spec:
            serviceAccountName: compass-director
            restartPolicy: Never
            shareProcessNamespace: true
            containers:
                - name: loader
                  image: eu.gcr.io/kyma-project/incubator/compass-director:PR-2160
                  imagePullPolicy: IfNotPresent
                  env:
                      - name: APP_DB_USER
                        valueFrom:
                            secretKeyRef:
                                name: compass-postgresql
                                key: postgresql-director-username
                      - name: APP_DB_PASSWORD
                        valueFrom:
                            secretKeyRef:
                                name: compass-postgresql
                                key: postgresql-director-password
                      - name: APP_DB_HOST
                        valueFrom:
                            secretKeyRef:
                                name: compass-postgresql
                                key: postgresql-serviceName
                      - name: APP_DB_PORT
                        valueFrom:
                            secretKeyRef:
                                name: compass-postgresql
                                key: postgresql-servicePort
                      - name: APP_DB_NAME
                        valueFrom:
                            secretKeyRef:
                                name: compass-postgresql
                                key: postgresql-director-db-name
                      - name: APP_DB_SSL
                        valueFrom:
                            secretKeyRef:
                                name: compass-postgresql
                                key: postgresql-sslMode
                      - name: APP_DB_MAX_OPEN_CONNECTIONS
                        value: "1"
                      - name: APP_DB_MAX_IDLE_CONNECTIONS
                        value: "1"
                      - name: APP_LOG_FORMAT
                        value: "kibana"
                  volumeMounts:
                    - name: default-tenant-config
                      mountPath: /data/default-tenants.json
                      subPath: tenants.json
                  command:
                    - "/bin/sh"
                  args:
                    - "-c"
                    - "./tenantloader; exit_code=$?; sleep 5; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
              
            volumes:
              - name: default-tenant-config
                configMap:
                  name: compass-director-default-tenant-config
---
# Source: compass/templates/migrator-down-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: compass-migration-down
  labels:
    app: compass
    release: compass
  annotations:
    "helm.sh/hook": pre-rollback
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: compass
        release: compass
    spec:
      serviceAccountName: compass-migrator-down-job
      restartPolicy: Never
      shareProcessNamespace: true
      containers:
        - name: migrator
          image: eu.gcr.io/kyma-project/incubator/compass-schema-migrator:PR-2157
          imagePullPolicy: IfNotPresent
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-serviceName
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-servicePort
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-director-db-name
            - name: DB_SSL
              valueFrom:
                secretKeyRef:
                  name: compass-postgresql
                  key: postgresql-sslMode
          command:
            - "/bin/bash"
          args:
            - "-c"
            - "sleep 20; ./run.sh --down --component director --pv-path /compass-migrations; exit_code=$?; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
          volumeMounts:
            - name: migrations-storage
              mountPath: /compass-migrations
      volumes:
        - name: migrations-storage
          persistentVolumeClaim:
            claimName: compass-director-migrations
---
# Source: compass/templates/update-expected-schema-version-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: update-expected-schema-version
  labels:
    app: compass
    release: compass
  annotations:
    "helm.sh/hook": pre-install,pre-rollback,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app: compass
        release: compass
    spec:
      serviceAccountName: update-expected-schema-version
      restartPolicy: Never
      shareProcessNamespace: true
      containers:
      - name: editor
        image: eu.gcr.io/kyma-project/incubator/compass-schema-migrator:PR-2157
        imagePullPolicy: IfNotPresent
        command:
        - "/bin/bash"
        args:
        - "-c"
        - " chmod +x ./update-expected-schema-version.sh; ./update-expected-schema-version.sh --component director --cm-name expected-schema-version; exit_code=$?; echo '# KILLING PILOT-AGENT #'; pkill -INT cloud_sql_proxy; curl -XPOST http://127.0.0.1:15020/quitquitquit; sleep 5; exit $exit_code;"
